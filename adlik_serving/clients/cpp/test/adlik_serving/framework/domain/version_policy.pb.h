// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adlik_serving/framework/domain/version_policy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto;
namespace adlik {
namespace serving {
class VersionPolicyProto;
class VersionPolicyProtoDefaultTypeInternal;
extern VersionPolicyProtoDefaultTypeInternal _VersionPolicyProto_default_instance_;
class VersionPolicyProto_All;
class VersionPolicyProto_AllDefaultTypeInternal;
extern VersionPolicyProto_AllDefaultTypeInternal _VersionPolicyProto_All_default_instance_;
class VersionPolicyProto_Latest;
class VersionPolicyProto_LatestDefaultTypeInternal;
extern VersionPolicyProto_LatestDefaultTypeInternal _VersionPolicyProto_Latest_default_instance_;
class VersionPolicyProto_None;
class VersionPolicyProto_NoneDefaultTypeInternal;
extern VersionPolicyProto_NoneDefaultTypeInternal _VersionPolicyProto_None_default_instance_;
class VersionPolicyProto_Specific;
class VersionPolicyProto_SpecificDefaultTypeInternal;
extern VersionPolicyProto_SpecificDefaultTypeInternal _VersionPolicyProto_Specific_default_instance_;
}  // namespace serving
}  // namespace adlik
PROTOBUF_NAMESPACE_OPEN
template<> ::adlik::serving::VersionPolicyProto* Arena::CreateMaybeMessage<::adlik::serving::VersionPolicyProto>(Arena*);
template<> ::adlik::serving::VersionPolicyProto_All* Arena::CreateMaybeMessage<::adlik::serving::VersionPolicyProto_All>(Arena*);
template<> ::adlik::serving::VersionPolicyProto_Latest* Arena::CreateMaybeMessage<::adlik::serving::VersionPolicyProto_Latest>(Arena*);
template<> ::adlik::serving::VersionPolicyProto_None* Arena::CreateMaybeMessage<::adlik::serving::VersionPolicyProto_None>(Arena*);
template<> ::adlik::serving::VersionPolicyProto_Specific* Arena::CreateMaybeMessage<::adlik::serving::VersionPolicyProto_Specific>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace adlik {
namespace serving {

// ===================================================================

class VersionPolicyProto_Latest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:adlik.serving.VersionPolicyProto.Latest) */ {
 public:
  VersionPolicyProto_Latest();
  virtual ~VersionPolicyProto_Latest();

  VersionPolicyProto_Latest(const VersionPolicyProto_Latest& from);
  VersionPolicyProto_Latest(VersionPolicyProto_Latest&& from) noexcept
    : VersionPolicyProto_Latest() {
    *this = ::std::move(from);
  }

  inline VersionPolicyProto_Latest& operator=(const VersionPolicyProto_Latest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionPolicyProto_Latest& operator=(VersionPolicyProto_Latest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionPolicyProto_Latest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionPolicyProto_Latest* internal_default_instance() {
    return reinterpret_cast<const VersionPolicyProto_Latest*>(
               &_VersionPolicyProto_Latest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VersionPolicyProto_Latest& a, VersionPolicyProto_Latest& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionPolicyProto_Latest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionPolicyProto_Latest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionPolicyProto_Latest* New() const final {
    return CreateMaybeMessage<VersionPolicyProto_Latest>(nullptr);
  }

  VersionPolicyProto_Latest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionPolicyProto_Latest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionPolicyProto_Latest& from);
  void MergeFrom(const VersionPolicyProto_Latest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionPolicyProto_Latest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adlik.serving.VersionPolicyProto.Latest";
  }
  protected:
  explicit VersionPolicyProto_Latest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto);
    return ::descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumVersionsFieldNumber = 1,
  };
  // uint32 num_versions = 1;
  void clear_num_versions();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_versions() const;
  void set_num_versions(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:adlik.serving.VersionPolicyProto.Latest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_versions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class VersionPolicyProto_All :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:adlik.serving.VersionPolicyProto.All) */ {
 public:
  VersionPolicyProto_All();
  virtual ~VersionPolicyProto_All();

  VersionPolicyProto_All(const VersionPolicyProto_All& from);
  VersionPolicyProto_All(VersionPolicyProto_All&& from) noexcept
    : VersionPolicyProto_All() {
    *this = ::std::move(from);
  }

  inline VersionPolicyProto_All& operator=(const VersionPolicyProto_All& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionPolicyProto_All& operator=(VersionPolicyProto_All&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionPolicyProto_All& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionPolicyProto_All* internal_default_instance() {
    return reinterpret_cast<const VersionPolicyProto_All*>(
               &_VersionPolicyProto_All_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VersionPolicyProto_All& a, VersionPolicyProto_All& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionPolicyProto_All* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionPolicyProto_All* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionPolicyProto_All* New() const final {
    return CreateMaybeMessage<VersionPolicyProto_All>(nullptr);
  }

  VersionPolicyProto_All* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionPolicyProto_All>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionPolicyProto_All& from);
  void MergeFrom(const VersionPolicyProto_All& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionPolicyProto_All* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adlik.serving.VersionPolicyProto.All";
  }
  protected:
  explicit VersionPolicyProto_All(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto);
    return ::descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:adlik.serving.VersionPolicyProto.All)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class VersionPolicyProto_None :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:adlik.serving.VersionPolicyProto.None) */ {
 public:
  VersionPolicyProto_None();
  virtual ~VersionPolicyProto_None();

  VersionPolicyProto_None(const VersionPolicyProto_None& from);
  VersionPolicyProto_None(VersionPolicyProto_None&& from) noexcept
    : VersionPolicyProto_None() {
    *this = ::std::move(from);
  }

  inline VersionPolicyProto_None& operator=(const VersionPolicyProto_None& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionPolicyProto_None& operator=(VersionPolicyProto_None&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionPolicyProto_None& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionPolicyProto_None* internal_default_instance() {
    return reinterpret_cast<const VersionPolicyProto_None*>(
               &_VersionPolicyProto_None_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VersionPolicyProto_None& a, VersionPolicyProto_None& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionPolicyProto_None* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionPolicyProto_None* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionPolicyProto_None* New() const final {
    return CreateMaybeMessage<VersionPolicyProto_None>(nullptr);
  }

  VersionPolicyProto_None* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionPolicyProto_None>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionPolicyProto_None& from);
  void MergeFrom(const VersionPolicyProto_None& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionPolicyProto_None* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adlik.serving.VersionPolicyProto.None";
  }
  protected:
  explicit VersionPolicyProto_None(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto);
    return ::descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:adlik.serving.VersionPolicyProto.None)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class VersionPolicyProto_Specific :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:adlik.serving.VersionPolicyProto.Specific) */ {
 public:
  VersionPolicyProto_Specific();
  virtual ~VersionPolicyProto_Specific();

  VersionPolicyProto_Specific(const VersionPolicyProto_Specific& from);
  VersionPolicyProto_Specific(VersionPolicyProto_Specific&& from) noexcept
    : VersionPolicyProto_Specific() {
    *this = ::std::move(from);
  }

  inline VersionPolicyProto_Specific& operator=(const VersionPolicyProto_Specific& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionPolicyProto_Specific& operator=(VersionPolicyProto_Specific&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionPolicyProto_Specific& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionPolicyProto_Specific* internal_default_instance() {
    return reinterpret_cast<const VersionPolicyProto_Specific*>(
               &_VersionPolicyProto_Specific_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VersionPolicyProto_Specific& a, VersionPolicyProto_Specific& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionPolicyProto_Specific* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionPolicyProto_Specific* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionPolicyProto_Specific* New() const final {
    return CreateMaybeMessage<VersionPolicyProto_Specific>(nullptr);
  }

  VersionPolicyProto_Specific* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionPolicyProto_Specific>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionPolicyProto_Specific& from);
  void MergeFrom(const VersionPolicyProto_Specific& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionPolicyProto_Specific* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adlik.serving.VersionPolicyProto.Specific";
  }
  protected:
  explicit VersionPolicyProto_Specific(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto);
    return ::descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionsFieldNumber = 1,
  };
  // repeated int64 versions = 1;
  int versions_size() const;
  void clear_versions();
  ::PROTOBUF_NAMESPACE_ID::int64 versions(int index) const;
  void set_versions(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_versions(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      versions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_versions();

  // @@protoc_insertion_point(class_scope:adlik.serving.VersionPolicyProto.Specific)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > versions_;
  mutable std::atomic<int> _versions_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto;
};
// -------------------------------------------------------------------

class VersionPolicyProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:adlik.serving.VersionPolicyProto) */ {
 public:
  VersionPolicyProto();
  virtual ~VersionPolicyProto();

  VersionPolicyProto(const VersionPolicyProto& from);
  VersionPolicyProto(VersionPolicyProto&& from) noexcept
    : VersionPolicyProto() {
    *this = ::std::move(from);
  }

  inline VersionPolicyProto& operator=(const VersionPolicyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionPolicyProto& operator=(VersionPolicyProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VersionPolicyProto& default_instance();

  enum PolicyChoiceCase {
    kLatest = 1,
    kAll = 2,
    kSpecific = 3,
    kNone = 4,
    POLICY_CHOICE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionPolicyProto* internal_default_instance() {
    return reinterpret_cast<const VersionPolicyProto*>(
               &_VersionPolicyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VersionPolicyProto& a, VersionPolicyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionPolicyProto* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionPolicyProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionPolicyProto* New() const final {
    return CreateMaybeMessage<VersionPolicyProto>(nullptr);
  }

  VersionPolicyProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionPolicyProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VersionPolicyProto& from);
  void MergeFrom(const VersionPolicyProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionPolicyProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adlik.serving.VersionPolicyProto";
  }
  protected:
  explicit VersionPolicyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto);
    return ::descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef VersionPolicyProto_Latest Latest;
  typedef VersionPolicyProto_All All;
  typedef VersionPolicyProto_None None;
  typedef VersionPolicyProto_Specific Specific;

  // accessors -------------------------------------------------------

  enum : int {
    kLatestFieldNumber = 1,
    kAllFieldNumber = 2,
    kSpecificFieldNumber = 3,
    kNoneFieldNumber = 4,
  };
  // .adlik.serving.VersionPolicyProto.Latest latest = 1;
  bool has_latest() const;
  void clear_latest();
  const ::adlik::serving::VersionPolicyProto_Latest& latest() const;
  ::adlik::serving::VersionPolicyProto_Latest* release_latest();
  ::adlik::serving::VersionPolicyProto_Latest* mutable_latest();
  void set_allocated_latest(::adlik::serving::VersionPolicyProto_Latest* latest);
  void unsafe_arena_set_allocated_latest(
      ::adlik::serving::VersionPolicyProto_Latest* latest);
  ::adlik::serving::VersionPolicyProto_Latest* unsafe_arena_release_latest();

  // .adlik.serving.VersionPolicyProto.All all = 2;
  bool has_all() const;
  void clear_all();
  const ::adlik::serving::VersionPolicyProto_All& all() const;
  ::adlik::serving::VersionPolicyProto_All* release_all();
  ::adlik::serving::VersionPolicyProto_All* mutable_all();
  void set_allocated_all(::adlik::serving::VersionPolicyProto_All* all);
  void unsafe_arena_set_allocated_all(
      ::adlik::serving::VersionPolicyProto_All* all);
  ::adlik::serving::VersionPolicyProto_All* unsafe_arena_release_all();

  // .adlik.serving.VersionPolicyProto.Specific specific = 3;
  bool has_specific() const;
  void clear_specific();
  const ::adlik::serving::VersionPolicyProto_Specific& specific() const;
  ::adlik::serving::VersionPolicyProto_Specific* release_specific();
  ::adlik::serving::VersionPolicyProto_Specific* mutable_specific();
  void set_allocated_specific(::adlik::serving::VersionPolicyProto_Specific* specific);
  void unsafe_arena_set_allocated_specific(
      ::adlik::serving::VersionPolicyProto_Specific* specific);
  ::adlik::serving::VersionPolicyProto_Specific* unsafe_arena_release_specific();

  // .adlik.serving.VersionPolicyProto.None none = 4;
  bool has_none() const;
  void clear_none();
  const ::adlik::serving::VersionPolicyProto_None& none() const;
  ::adlik::serving::VersionPolicyProto_None* release_none();
  ::adlik::serving::VersionPolicyProto_None* mutable_none();
  void set_allocated_none(::adlik::serving::VersionPolicyProto_None* none);
  void unsafe_arena_set_allocated_none(
      ::adlik::serving::VersionPolicyProto_None* none);
  ::adlik::serving::VersionPolicyProto_None* unsafe_arena_release_none();

  void clear_policy_choice();
  PolicyChoiceCase policy_choice_case() const;
  // @@protoc_insertion_point(class_scope:adlik.serving.VersionPolicyProto)
 private:
  class _Internal;
  void set_has_latest();
  void set_has_all();
  void set_has_specific();
  void set_has_none();

  inline bool has_policy_choice() const;
  inline void clear_has_policy_choice();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union PolicyChoiceUnion {
    PolicyChoiceUnion() {}
    ::adlik::serving::VersionPolicyProto_Latest* latest_;
    ::adlik::serving::VersionPolicyProto_All* all_;
    ::adlik::serving::VersionPolicyProto_Specific* specific_;
    ::adlik::serving::VersionPolicyProto_None* none_;
  } policy_choice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VersionPolicyProto_Latest

// uint32 num_versions = 1;
inline void VersionPolicyProto_Latest::clear_num_versions() {
  num_versions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VersionPolicyProto_Latest::num_versions() const {
  // @@protoc_insertion_point(field_get:adlik.serving.VersionPolicyProto.Latest.num_versions)
  return num_versions_;
}
inline void VersionPolicyProto_Latest::set_num_versions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_versions_ = value;
  // @@protoc_insertion_point(field_set:adlik.serving.VersionPolicyProto.Latest.num_versions)
}

// -------------------------------------------------------------------

// VersionPolicyProto_All

// -------------------------------------------------------------------

// VersionPolicyProto_None

// -------------------------------------------------------------------

// VersionPolicyProto_Specific

// repeated int64 versions = 1;
inline int VersionPolicyProto_Specific::versions_size() const {
  return versions_.size();
}
inline void VersionPolicyProto_Specific::clear_versions() {
  versions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VersionPolicyProto_Specific::versions(int index) const {
  // @@protoc_insertion_point(field_get:adlik.serving.VersionPolicyProto.Specific.versions)
  return versions_.Get(index);
}
inline void VersionPolicyProto_Specific::set_versions(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  versions_.Set(index, value);
  // @@protoc_insertion_point(field_set:adlik.serving.VersionPolicyProto.Specific.versions)
}
inline void VersionPolicyProto_Specific::add_versions(::PROTOBUF_NAMESPACE_ID::int64 value) {
  versions_.Add(value);
  // @@protoc_insertion_point(field_add:adlik.serving.VersionPolicyProto.Specific.versions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
VersionPolicyProto_Specific::versions() const {
  // @@protoc_insertion_point(field_list:adlik.serving.VersionPolicyProto.Specific.versions)
  return versions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
VersionPolicyProto_Specific::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:adlik.serving.VersionPolicyProto.Specific.versions)
  return &versions_;
}

// -------------------------------------------------------------------

// VersionPolicyProto

// .adlik.serving.VersionPolicyProto.Latest latest = 1;
inline bool VersionPolicyProto::has_latest() const {
  return policy_choice_case() == kLatest;
}
inline void VersionPolicyProto::set_has_latest() {
  _oneof_case_[0] = kLatest;
}
inline void VersionPolicyProto::clear_latest() {
  if (has_latest()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete policy_choice_.latest_;
    }
    clear_has_policy_choice();
  }
}
inline ::adlik::serving::VersionPolicyProto_Latest* VersionPolicyProto::release_latest() {
  // @@protoc_insertion_point(field_release:adlik.serving.VersionPolicyProto.latest)
  if (has_latest()) {
    clear_has_policy_choice();
      ::adlik::serving::VersionPolicyProto_Latest* temp = policy_choice_.latest_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    policy_choice_.latest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::adlik::serving::VersionPolicyProto_Latest& VersionPolicyProto::latest() const {
  // @@protoc_insertion_point(field_get:adlik.serving.VersionPolicyProto.latest)
  return has_latest()
      ? *policy_choice_.latest_
      : *reinterpret_cast< ::adlik::serving::VersionPolicyProto_Latest*>(&::adlik::serving::_VersionPolicyProto_Latest_default_instance_);
}
inline ::adlik::serving::VersionPolicyProto_Latest* VersionPolicyProto::unsafe_arena_release_latest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:adlik.serving.VersionPolicyProto.latest)
  if (has_latest()) {
    clear_has_policy_choice();
    ::adlik::serving::VersionPolicyProto_Latest* temp = policy_choice_.latest_;
    policy_choice_.latest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VersionPolicyProto::unsafe_arena_set_allocated_latest(::adlik::serving::VersionPolicyProto_Latest* latest) {
  clear_policy_choice();
  if (latest) {
    set_has_latest();
    policy_choice_.latest_ = latest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adlik.serving.VersionPolicyProto.latest)
}
inline ::adlik::serving::VersionPolicyProto_Latest* VersionPolicyProto::mutable_latest() {
  if (!has_latest()) {
    clear_policy_choice();
    set_has_latest();
    policy_choice_.latest_ = CreateMaybeMessage< ::adlik::serving::VersionPolicyProto_Latest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:adlik.serving.VersionPolicyProto.latest)
  return policy_choice_.latest_;
}

// .adlik.serving.VersionPolicyProto.All all = 2;
inline bool VersionPolicyProto::has_all() const {
  return policy_choice_case() == kAll;
}
inline void VersionPolicyProto::set_has_all() {
  _oneof_case_[0] = kAll;
}
inline void VersionPolicyProto::clear_all() {
  if (has_all()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete policy_choice_.all_;
    }
    clear_has_policy_choice();
  }
}
inline ::adlik::serving::VersionPolicyProto_All* VersionPolicyProto::release_all() {
  // @@protoc_insertion_point(field_release:adlik.serving.VersionPolicyProto.all)
  if (has_all()) {
    clear_has_policy_choice();
      ::adlik::serving::VersionPolicyProto_All* temp = policy_choice_.all_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    policy_choice_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::adlik::serving::VersionPolicyProto_All& VersionPolicyProto::all() const {
  // @@protoc_insertion_point(field_get:adlik.serving.VersionPolicyProto.all)
  return has_all()
      ? *policy_choice_.all_
      : *reinterpret_cast< ::adlik::serving::VersionPolicyProto_All*>(&::adlik::serving::_VersionPolicyProto_All_default_instance_);
}
inline ::adlik::serving::VersionPolicyProto_All* VersionPolicyProto::unsafe_arena_release_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:adlik.serving.VersionPolicyProto.all)
  if (has_all()) {
    clear_has_policy_choice();
    ::adlik::serving::VersionPolicyProto_All* temp = policy_choice_.all_;
    policy_choice_.all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VersionPolicyProto::unsafe_arena_set_allocated_all(::adlik::serving::VersionPolicyProto_All* all) {
  clear_policy_choice();
  if (all) {
    set_has_all();
    policy_choice_.all_ = all;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adlik.serving.VersionPolicyProto.all)
}
inline ::adlik::serving::VersionPolicyProto_All* VersionPolicyProto::mutable_all() {
  if (!has_all()) {
    clear_policy_choice();
    set_has_all();
    policy_choice_.all_ = CreateMaybeMessage< ::adlik::serving::VersionPolicyProto_All >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:adlik.serving.VersionPolicyProto.all)
  return policy_choice_.all_;
}

// .adlik.serving.VersionPolicyProto.Specific specific = 3;
inline bool VersionPolicyProto::has_specific() const {
  return policy_choice_case() == kSpecific;
}
inline void VersionPolicyProto::set_has_specific() {
  _oneof_case_[0] = kSpecific;
}
inline void VersionPolicyProto::clear_specific() {
  if (has_specific()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete policy_choice_.specific_;
    }
    clear_has_policy_choice();
  }
}
inline ::adlik::serving::VersionPolicyProto_Specific* VersionPolicyProto::release_specific() {
  // @@protoc_insertion_point(field_release:adlik.serving.VersionPolicyProto.specific)
  if (has_specific()) {
    clear_has_policy_choice();
      ::adlik::serving::VersionPolicyProto_Specific* temp = policy_choice_.specific_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    policy_choice_.specific_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::adlik::serving::VersionPolicyProto_Specific& VersionPolicyProto::specific() const {
  // @@protoc_insertion_point(field_get:adlik.serving.VersionPolicyProto.specific)
  return has_specific()
      ? *policy_choice_.specific_
      : *reinterpret_cast< ::adlik::serving::VersionPolicyProto_Specific*>(&::adlik::serving::_VersionPolicyProto_Specific_default_instance_);
}
inline ::adlik::serving::VersionPolicyProto_Specific* VersionPolicyProto::unsafe_arena_release_specific() {
  // @@protoc_insertion_point(field_unsafe_arena_release:adlik.serving.VersionPolicyProto.specific)
  if (has_specific()) {
    clear_has_policy_choice();
    ::adlik::serving::VersionPolicyProto_Specific* temp = policy_choice_.specific_;
    policy_choice_.specific_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VersionPolicyProto::unsafe_arena_set_allocated_specific(::adlik::serving::VersionPolicyProto_Specific* specific) {
  clear_policy_choice();
  if (specific) {
    set_has_specific();
    policy_choice_.specific_ = specific;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adlik.serving.VersionPolicyProto.specific)
}
inline ::adlik::serving::VersionPolicyProto_Specific* VersionPolicyProto::mutable_specific() {
  if (!has_specific()) {
    clear_policy_choice();
    set_has_specific();
    policy_choice_.specific_ = CreateMaybeMessage< ::adlik::serving::VersionPolicyProto_Specific >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:adlik.serving.VersionPolicyProto.specific)
  return policy_choice_.specific_;
}

// .adlik.serving.VersionPolicyProto.None none = 4;
inline bool VersionPolicyProto::has_none() const {
  return policy_choice_case() == kNone;
}
inline void VersionPolicyProto::set_has_none() {
  _oneof_case_[0] = kNone;
}
inline void VersionPolicyProto::clear_none() {
  if (has_none()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete policy_choice_.none_;
    }
    clear_has_policy_choice();
  }
}
inline ::adlik::serving::VersionPolicyProto_None* VersionPolicyProto::release_none() {
  // @@protoc_insertion_point(field_release:adlik.serving.VersionPolicyProto.none)
  if (has_none()) {
    clear_has_policy_choice();
      ::adlik::serving::VersionPolicyProto_None* temp = policy_choice_.none_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    policy_choice_.none_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::adlik::serving::VersionPolicyProto_None& VersionPolicyProto::none() const {
  // @@protoc_insertion_point(field_get:adlik.serving.VersionPolicyProto.none)
  return has_none()
      ? *policy_choice_.none_
      : *reinterpret_cast< ::adlik::serving::VersionPolicyProto_None*>(&::adlik::serving::_VersionPolicyProto_None_default_instance_);
}
inline ::adlik::serving::VersionPolicyProto_None* VersionPolicyProto::unsafe_arena_release_none() {
  // @@protoc_insertion_point(field_unsafe_arena_release:adlik.serving.VersionPolicyProto.none)
  if (has_none()) {
    clear_has_policy_choice();
    ::adlik::serving::VersionPolicyProto_None* temp = policy_choice_.none_;
    policy_choice_.none_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VersionPolicyProto::unsafe_arena_set_allocated_none(::adlik::serving::VersionPolicyProto_None* none) {
  clear_policy_choice();
  if (none) {
    set_has_none();
    policy_choice_.none_ = none;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adlik.serving.VersionPolicyProto.none)
}
inline ::adlik::serving::VersionPolicyProto_None* VersionPolicyProto::mutable_none() {
  if (!has_none()) {
    clear_policy_choice();
    set_has_none();
    policy_choice_.none_ = CreateMaybeMessage< ::adlik::serving::VersionPolicyProto_None >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:adlik.serving.VersionPolicyProto.none)
  return policy_choice_.none_;
}

inline bool VersionPolicyProto::has_policy_choice() const {
  return policy_choice_case() != POLICY_CHOICE_NOT_SET;
}
inline void VersionPolicyProto::clear_has_policy_choice() {
  _oneof_case_[0] = POLICY_CHOICE_NOT_SET;
}
inline VersionPolicyProto::PolicyChoiceCase VersionPolicyProto::policy_choice_case() const {
  return VersionPolicyProto::PolicyChoiceCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving
}  // namespace adlik

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto
