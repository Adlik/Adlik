// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adlik_serving/framework/domain/version_policy.proto

#include "adlik_serving/framework/domain/version_policy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionPolicyProto_All_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionPolicyProto_Latest_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionPolicyProto_None_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionPolicyProto_Specific_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto;
namespace adlik {
namespace serving {
class VersionPolicyProto_LatestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionPolicyProto_Latest> _instance;
} _VersionPolicyProto_Latest_default_instance_;
class VersionPolicyProto_AllDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionPolicyProto_All> _instance;
} _VersionPolicyProto_All_default_instance_;
class VersionPolicyProto_NoneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionPolicyProto_None> _instance;
} _VersionPolicyProto_None_default_instance_;
class VersionPolicyProto_SpecificDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionPolicyProto_Specific> _instance;
} _VersionPolicyProto_Specific_default_instance_;
class VersionPolicyProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionPolicyProto> _instance;
  const ::adlik::serving::VersionPolicyProto_Latest* latest_;
  const ::adlik::serving::VersionPolicyProto_All* all_;
  const ::adlik::serving::VersionPolicyProto_Specific* specific_;
  const ::adlik::serving::VersionPolicyProto_None* none_;
} _VersionPolicyProto_default_instance_;
}  // namespace serving
}  // namespace adlik
static void InitDefaultsscc_info_VersionPolicyProto_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_VersionPolicyProto_default_instance_;
    new (ptr) ::adlik::serving::VersionPolicyProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::VersionPolicyProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_VersionPolicyProto_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_VersionPolicyProto_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto}, {
      &scc_info_VersionPolicyProto_Latest_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.base,
      &scc_info_VersionPolicyProto_All_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.base,
      &scc_info_VersionPolicyProto_Specific_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.base,
      &scc_info_VersionPolicyProto_None_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.base,}};

static void InitDefaultsscc_info_VersionPolicyProto_All_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_VersionPolicyProto_All_default_instance_;
    new (ptr) ::adlik::serving::VersionPolicyProto_All();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::VersionPolicyProto_All::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionPolicyProto_All_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VersionPolicyProto_All_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_VersionPolicyProto_Latest_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_VersionPolicyProto_Latest_default_instance_;
    new (ptr) ::adlik::serving::VersionPolicyProto_Latest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::VersionPolicyProto_Latest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionPolicyProto_Latest_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VersionPolicyProto_Latest_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_VersionPolicyProto_None_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_VersionPolicyProto_None_default_instance_;
    new (ptr) ::adlik::serving::VersionPolicyProto_None();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::VersionPolicyProto_None::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionPolicyProto_None_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VersionPolicyProto_None_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto}, {}};

static void InitDefaultsscc_info_VersionPolicyProto_Specific_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_VersionPolicyProto_Specific_default_instance_;
    new (ptr) ::adlik::serving::VersionPolicyProto_Specific();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::VersionPolicyProto_Specific::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionPolicyProto_Specific_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VersionPolicyProto_Specific_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::VersionPolicyProto_Latest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::VersionPolicyProto_Latest, num_versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::VersionPolicyProto_All, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::VersionPolicyProto_None, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::VersionPolicyProto_Specific, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::VersionPolicyProto_Specific, versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::VersionPolicyProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::VersionPolicyProto, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::adlik::serving::VersionPolicyProtoDefaultTypeInternal, latest_),
  offsetof(::adlik::serving::VersionPolicyProtoDefaultTypeInternal, all_),
  offsetof(::adlik::serving::VersionPolicyProtoDefaultTypeInternal, specific_),
  offsetof(::adlik::serving::VersionPolicyProtoDefaultTypeInternal, none_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::VersionPolicyProto, policy_choice_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::adlik::serving::VersionPolicyProto_Latest)},
  { 6, -1, sizeof(::adlik::serving::VersionPolicyProto_All)},
  { 11, -1, sizeof(::adlik::serving::VersionPolicyProto_None)},
  { 16, -1, sizeof(::adlik::serving::VersionPolicyProto_Specific)},
  { 22, -1, sizeof(::adlik::serving::VersionPolicyProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_VersionPolicyProto_Latest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_VersionPolicyProto_All_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_VersionPolicyProto_None_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_VersionPolicyProto_Specific_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_VersionPolicyProto_default_instance_),
};

const char descriptor_table_protodef_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3adlik_serving/framework/domain/version"
  "_policy.proto\022\radlik.serving\"\334\002\n\022Version"
  "PolicyProto\022:\n\006latest\030\001 \001(\0132(.adlik.serv"
  "ing.VersionPolicyProto.LatestH\000\0224\n\003all\030\002"
  " \001(\0132%.adlik.serving.VersionPolicyProto."
  "AllH\000\022>\n\010specific\030\003 \001(\0132*.adlik.serving."
  "VersionPolicyProto.SpecificH\000\0226\n\004none\030\004 "
  "\001(\0132&.adlik.serving.VersionPolicyProto.N"
  "oneH\000\032\036\n\006Latest\022\024\n\014num_versions\030\001 \001(\r\032\005\n"
  "\003All\032\006\n\004None\032\034\n\010Specific\022\020\n\010versions\030\001 \003"
  "(\003B\017\n\rpolicy_choiceB\003\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto_sccs[5] = {
  &scc_info_VersionPolicyProto_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.base,
  &scc_info_VersionPolicyProto_All_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.base,
  &scc_info_VersionPolicyProto_Latest_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.base,
  &scc_info_VersionPolicyProto_None_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.base,
  &scc_info_VersionPolicyProto_Specific_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto_once;
static bool descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto = {
  &descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto_initialized, descriptor_table_protodef_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto, "adlik_serving/framework/domain/version_policy.proto", 432,
  &descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto_once, descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto_sccs, descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto::offsets,
  file_level_metadata_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto, 5, file_level_enum_descriptors_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto, file_level_service_descriptors_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto), true);
namespace adlik {
namespace serving {

// ===================================================================

void VersionPolicyProto_Latest::InitAsDefaultInstance() {
}
class VersionPolicyProto_Latest::_Internal {
 public:
};

VersionPolicyProto_Latest::VersionPolicyProto_Latest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.VersionPolicyProto.Latest)
}
VersionPolicyProto_Latest::VersionPolicyProto_Latest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.VersionPolicyProto.Latest)
}
VersionPolicyProto_Latest::VersionPolicyProto_Latest(const VersionPolicyProto_Latest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_versions_ = from.num_versions_;
  // @@protoc_insertion_point(copy_constructor:adlik.serving.VersionPolicyProto.Latest)
}

void VersionPolicyProto_Latest::SharedCtor() {
  num_versions_ = 0u;
}

VersionPolicyProto_Latest::~VersionPolicyProto_Latest() {
  // @@protoc_insertion_point(destructor:adlik.serving.VersionPolicyProto.Latest)
  SharedDtor();
}

void VersionPolicyProto_Latest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void VersionPolicyProto_Latest::ArenaDtor(void* object) {
  VersionPolicyProto_Latest* _this = reinterpret_cast< VersionPolicyProto_Latest* >(object);
  (void)_this;
}
void VersionPolicyProto_Latest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionPolicyProto_Latest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionPolicyProto_Latest& VersionPolicyProto_Latest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionPolicyProto_Latest_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void VersionPolicyProto_Latest::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.VersionPolicyProto.Latest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_versions_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VersionPolicyProto_Latest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num_versions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_versions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VersionPolicyProto_Latest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.VersionPolicyProto.Latest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 num_versions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_versions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.VersionPolicyProto.Latest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.VersionPolicyProto.Latest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VersionPolicyProto_Latest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.VersionPolicyProto.Latest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_versions = 1;
  if (this->num_versions() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->num_versions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.VersionPolicyProto.Latest)
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionPolicyProto_Latest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.VersionPolicyProto.Latest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_versions = 1;
  if (this->num_versions() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_versions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.VersionPolicyProto.Latest)
  return target;
}

size_t VersionPolicyProto_Latest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.VersionPolicyProto.Latest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 num_versions = 1;
  if (this->num_versions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->num_versions());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionPolicyProto_Latest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.VersionPolicyProto.Latest)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionPolicyProto_Latest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionPolicyProto_Latest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.VersionPolicyProto.Latest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.VersionPolicyProto.Latest)
    MergeFrom(*source);
  }
}

void VersionPolicyProto_Latest::MergeFrom(const VersionPolicyProto_Latest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.VersionPolicyProto.Latest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_versions() != 0) {
    set_num_versions(from.num_versions());
  }
}

void VersionPolicyProto_Latest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.VersionPolicyProto.Latest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionPolicyProto_Latest::CopyFrom(const VersionPolicyProto_Latest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.VersionPolicyProto.Latest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionPolicyProto_Latest::IsInitialized() const {
  return true;
}

void VersionPolicyProto_Latest::InternalSwap(VersionPolicyProto_Latest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num_versions_, other->num_versions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionPolicyProto_Latest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VersionPolicyProto_All::InitAsDefaultInstance() {
}
class VersionPolicyProto_All::_Internal {
 public:
};

VersionPolicyProto_All::VersionPolicyProto_All()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.VersionPolicyProto.All)
}
VersionPolicyProto_All::VersionPolicyProto_All(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.VersionPolicyProto.All)
}
VersionPolicyProto_All::VersionPolicyProto_All(const VersionPolicyProto_All& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:adlik.serving.VersionPolicyProto.All)
}

void VersionPolicyProto_All::SharedCtor() {
}

VersionPolicyProto_All::~VersionPolicyProto_All() {
  // @@protoc_insertion_point(destructor:adlik.serving.VersionPolicyProto.All)
  SharedDtor();
}

void VersionPolicyProto_All::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void VersionPolicyProto_All::ArenaDtor(void* object) {
  VersionPolicyProto_All* _this = reinterpret_cast< VersionPolicyProto_All* >(object);
  (void)_this;
}
void VersionPolicyProto_All::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionPolicyProto_All::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionPolicyProto_All& VersionPolicyProto_All::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionPolicyProto_All_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void VersionPolicyProto_All::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.VersionPolicyProto.All)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VersionPolicyProto_All::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VersionPolicyProto_All::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.VersionPolicyProto.All)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.VersionPolicyProto.All)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.VersionPolicyProto.All)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VersionPolicyProto_All::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.VersionPolicyProto.All)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.VersionPolicyProto.All)
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionPolicyProto_All::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.VersionPolicyProto.All)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.VersionPolicyProto.All)
  return target;
}

size_t VersionPolicyProto_All::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.VersionPolicyProto.All)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionPolicyProto_All::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.VersionPolicyProto.All)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionPolicyProto_All* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionPolicyProto_All>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.VersionPolicyProto.All)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.VersionPolicyProto.All)
    MergeFrom(*source);
  }
}

void VersionPolicyProto_All::MergeFrom(const VersionPolicyProto_All& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.VersionPolicyProto.All)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void VersionPolicyProto_All::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.VersionPolicyProto.All)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionPolicyProto_All::CopyFrom(const VersionPolicyProto_All& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.VersionPolicyProto.All)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionPolicyProto_All::IsInitialized() const {
  return true;
}

void VersionPolicyProto_All::InternalSwap(VersionPolicyProto_All* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionPolicyProto_All::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VersionPolicyProto_None::InitAsDefaultInstance() {
}
class VersionPolicyProto_None::_Internal {
 public:
};

VersionPolicyProto_None::VersionPolicyProto_None()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.VersionPolicyProto.None)
}
VersionPolicyProto_None::VersionPolicyProto_None(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.VersionPolicyProto.None)
}
VersionPolicyProto_None::VersionPolicyProto_None(const VersionPolicyProto_None& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:adlik.serving.VersionPolicyProto.None)
}

void VersionPolicyProto_None::SharedCtor() {
}

VersionPolicyProto_None::~VersionPolicyProto_None() {
  // @@protoc_insertion_point(destructor:adlik.serving.VersionPolicyProto.None)
  SharedDtor();
}

void VersionPolicyProto_None::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void VersionPolicyProto_None::ArenaDtor(void* object) {
  VersionPolicyProto_None* _this = reinterpret_cast< VersionPolicyProto_None* >(object);
  (void)_this;
}
void VersionPolicyProto_None::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionPolicyProto_None::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionPolicyProto_None& VersionPolicyProto_None::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionPolicyProto_None_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void VersionPolicyProto_None::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.VersionPolicyProto.None)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VersionPolicyProto_None::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VersionPolicyProto_None::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.VersionPolicyProto.None)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.VersionPolicyProto.None)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.VersionPolicyProto.None)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VersionPolicyProto_None::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.VersionPolicyProto.None)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.VersionPolicyProto.None)
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionPolicyProto_None::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.VersionPolicyProto.None)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.VersionPolicyProto.None)
  return target;
}

size_t VersionPolicyProto_None::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.VersionPolicyProto.None)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionPolicyProto_None::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.VersionPolicyProto.None)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionPolicyProto_None* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionPolicyProto_None>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.VersionPolicyProto.None)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.VersionPolicyProto.None)
    MergeFrom(*source);
  }
}

void VersionPolicyProto_None::MergeFrom(const VersionPolicyProto_None& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.VersionPolicyProto.None)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void VersionPolicyProto_None::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.VersionPolicyProto.None)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionPolicyProto_None::CopyFrom(const VersionPolicyProto_None& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.VersionPolicyProto.None)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionPolicyProto_None::IsInitialized() const {
  return true;
}

void VersionPolicyProto_None::InternalSwap(VersionPolicyProto_None* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionPolicyProto_None::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VersionPolicyProto_Specific::InitAsDefaultInstance() {
}
class VersionPolicyProto_Specific::_Internal {
 public:
};

VersionPolicyProto_Specific::VersionPolicyProto_Specific()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.VersionPolicyProto.Specific)
}
VersionPolicyProto_Specific::VersionPolicyProto_Specific(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  versions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.VersionPolicyProto.Specific)
}
VersionPolicyProto_Specific::VersionPolicyProto_Specific(const VersionPolicyProto_Specific& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      versions_(from.versions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:adlik.serving.VersionPolicyProto.Specific)
}

void VersionPolicyProto_Specific::SharedCtor() {
}

VersionPolicyProto_Specific::~VersionPolicyProto_Specific() {
  // @@protoc_insertion_point(destructor:adlik.serving.VersionPolicyProto.Specific)
  SharedDtor();
}

void VersionPolicyProto_Specific::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void VersionPolicyProto_Specific::ArenaDtor(void* object) {
  VersionPolicyProto_Specific* _this = reinterpret_cast< VersionPolicyProto_Specific* >(object);
  (void)_this;
}
void VersionPolicyProto_Specific::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionPolicyProto_Specific::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionPolicyProto_Specific& VersionPolicyProto_Specific::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionPolicyProto_Specific_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void VersionPolicyProto_Specific::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.VersionPolicyProto.Specific)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  versions_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VersionPolicyProto_Specific::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int64 versions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_versions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_versions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VersionPolicyProto_Specific::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.VersionPolicyProto.Specific)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 versions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_versions())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 10u, input, this->mutable_versions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.VersionPolicyProto.Specific)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.VersionPolicyProto.Specific)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VersionPolicyProto_Specific::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.VersionPolicyProto.Specific)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 versions = 1;
  if (this->versions_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_versions_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->versions_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->versions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.VersionPolicyProto.Specific)
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionPolicyProto_Specific::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.VersionPolicyProto.Specific)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 versions = 1;
  if (this->versions_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _versions_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->versions_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.VersionPolicyProto.Specific)
  return target;
}

size_t VersionPolicyProto_Specific::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.VersionPolicyProto.Specific)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 versions = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->versions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _versions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionPolicyProto_Specific::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.VersionPolicyProto.Specific)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionPolicyProto_Specific* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionPolicyProto_Specific>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.VersionPolicyProto.Specific)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.VersionPolicyProto.Specific)
    MergeFrom(*source);
  }
}

void VersionPolicyProto_Specific::MergeFrom(const VersionPolicyProto_Specific& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.VersionPolicyProto.Specific)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  versions_.MergeFrom(from.versions_);
}

void VersionPolicyProto_Specific::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.VersionPolicyProto.Specific)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionPolicyProto_Specific::CopyFrom(const VersionPolicyProto_Specific& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.VersionPolicyProto.Specific)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionPolicyProto_Specific::IsInitialized() const {
  return true;
}

void VersionPolicyProto_Specific::InternalSwap(VersionPolicyProto_Specific* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  versions_.InternalSwap(&other->versions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionPolicyProto_Specific::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VersionPolicyProto::InitAsDefaultInstance() {
  ::adlik::serving::_VersionPolicyProto_default_instance_.latest_ = const_cast< ::adlik::serving::VersionPolicyProto_Latest*>(
      ::adlik::serving::VersionPolicyProto_Latest::internal_default_instance());
  ::adlik::serving::_VersionPolicyProto_default_instance_.all_ = const_cast< ::adlik::serving::VersionPolicyProto_All*>(
      ::adlik::serving::VersionPolicyProto_All::internal_default_instance());
  ::adlik::serving::_VersionPolicyProto_default_instance_.specific_ = const_cast< ::adlik::serving::VersionPolicyProto_Specific*>(
      ::adlik::serving::VersionPolicyProto_Specific::internal_default_instance());
  ::adlik::serving::_VersionPolicyProto_default_instance_.none_ = const_cast< ::adlik::serving::VersionPolicyProto_None*>(
      ::adlik::serving::VersionPolicyProto_None::internal_default_instance());
}
class VersionPolicyProto::_Internal {
 public:
  static const ::adlik::serving::VersionPolicyProto_Latest& latest(const VersionPolicyProto* msg);
  static const ::adlik::serving::VersionPolicyProto_All& all(const VersionPolicyProto* msg);
  static const ::adlik::serving::VersionPolicyProto_Specific& specific(const VersionPolicyProto* msg);
  static const ::adlik::serving::VersionPolicyProto_None& none(const VersionPolicyProto* msg);
};

const ::adlik::serving::VersionPolicyProto_Latest&
VersionPolicyProto::_Internal::latest(const VersionPolicyProto* msg) {
  return *msg->policy_choice_.latest_;
}
const ::adlik::serving::VersionPolicyProto_All&
VersionPolicyProto::_Internal::all(const VersionPolicyProto* msg) {
  return *msg->policy_choice_.all_;
}
const ::adlik::serving::VersionPolicyProto_Specific&
VersionPolicyProto::_Internal::specific(const VersionPolicyProto* msg) {
  return *msg->policy_choice_.specific_;
}
const ::adlik::serving::VersionPolicyProto_None&
VersionPolicyProto::_Internal::none(const VersionPolicyProto* msg) {
  return *msg->policy_choice_.none_;
}
void VersionPolicyProto::set_allocated_latest(::adlik::serving::VersionPolicyProto_Latest* latest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_policy_choice();
  if (latest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(latest);
    if (message_arena != submessage_arena) {
      latest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest, submessage_arena);
    }
    set_has_latest();
    policy_choice_.latest_ = latest;
  }
  // @@protoc_insertion_point(field_set_allocated:adlik.serving.VersionPolicyProto.latest)
}
void VersionPolicyProto::set_allocated_all(::adlik::serving::VersionPolicyProto_All* all) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_policy_choice();
  if (all) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(all);
    if (message_arena != submessage_arena) {
      all = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all, submessage_arena);
    }
    set_has_all();
    policy_choice_.all_ = all;
  }
  // @@protoc_insertion_point(field_set_allocated:adlik.serving.VersionPolicyProto.all)
}
void VersionPolicyProto::set_allocated_specific(::adlik::serving::VersionPolicyProto_Specific* specific) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_policy_choice();
  if (specific) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(specific);
    if (message_arena != submessage_arena) {
      specific = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specific, submessage_arena);
    }
    set_has_specific();
    policy_choice_.specific_ = specific;
  }
  // @@protoc_insertion_point(field_set_allocated:adlik.serving.VersionPolicyProto.specific)
}
void VersionPolicyProto::set_allocated_none(::adlik::serving::VersionPolicyProto_None* none) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_policy_choice();
  if (none) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(none);
    if (message_arena != submessage_arena) {
      none = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, none, submessage_arena);
    }
    set_has_none();
    policy_choice_.none_ = none;
  }
  // @@protoc_insertion_point(field_set_allocated:adlik.serving.VersionPolicyProto.none)
}
VersionPolicyProto::VersionPolicyProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.VersionPolicyProto)
}
VersionPolicyProto::VersionPolicyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.VersionPolicyProto)
}
VersionPolicyProto::VersionPolicyProto(const VersionPolicyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_policy_choice();
  switch (from.policy_choice_case()) {
    case kLatest: {
      mutable_latest()->::adlik::serving::VersionPolicyProto_Latest::MergeFrom(from.latest());
      break;
    }
    case kAll: {
      mutable_all()->::adlik::serving::VersionPolicyProto_All::MergeFrom(from.all());
      break;
    }
    case kSpecific: {
      mutable_specific()->::adlik::serving::VersionPolicyProto_Specific::MergeFrom(from.specific());
      break;
    }
    case kNone: {
      mutable_none()->::adlik::serving::VersionPolicyProto_None::MergeFrom(from.none());
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:adlik.serving.VersionPolicyProto)
}

void VersionPolicyProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VersionPolicyProto_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.base);
  clear_has_policy_choice();
}

VersionPolicyProto::~VersionPolicyProto() {
  // @@protoc_insertion_point(destructor:adlik.serving.VersionPolicyProto)
  SharedDtor();
}

void VersionPolicyProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (has_policy_choice()) {
    clear_policy_choice();
  }
}

void VersionPolicyProto::ArenaDtor(void* object) {
  VersionPolicyProto* _this = reinterpret_cast< VersionPolicyProto* >(object);
  (void)_this;
}
void VersionPolicyProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionPolicyProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionPolicyProto& VersionPolicyProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionPolicyProto_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void VersionPolicyProto::clear_policy_choice() {
// @@protoc_insertion_point(one_of_clear_start:adlik.serving.VersionPolicyProto)
  switch (policy_choice_case()) {
    case kLatest: {
      if (GetArenaNoVirtual() == nullptr) {
        delete policy_choice_.latest_;
      }
      break;
    }
    case kAll: {
      if (GetArenaNoVirtual() == nullptr) {
        delete policy_choice_.all_;
      }
      break;
    }
    case kSpecific: {
      if (GetArenaNoVirtual() == nullptr) {
        delete policy_choice_.specific_;
      }
      break;
    }
    case kNone: {
      if (GetArenaNoVirtual() == nullptr) {
        delete policy_choice_.none_;
      }
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = POLICY_CHOICE_NOT_SET;
}


void VersionPolicyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.VersionPolicyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_policy_choice();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VersionPolicyProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .adlik.serving.VersionPolicyProto.Latest latest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_latest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .adlik.serving.VersionPolicyProto.All all = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_all(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .adlik.serving.VersionPolicyProto.Specific specific = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_specific(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .adlik.serving.VersionPolicyProto.None none = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_none(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VersionPolicyProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.VersionPolicyProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .adlik.serving.VersionPolicyProto.Latest latest = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_latest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adlik.serving.VersionPolicyProto.All all = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_all()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adlik.serving.VersionPolicyProto.Specific specific = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_specific()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adlik.serving.VersionPolicyProto.None none = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_none()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.VersionPolicyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.VersionPolicyProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VersionPolicyProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.VersionPolicyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adlik.serving.VersionPolicyProto.Latest latest = 1;
  if (has_latest()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::latest(this), output);
  }

  // .adlik.serving.VersionPolicyProto.All all = 2;
  if (has_all()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::all(this), output);
  }

  // .adlik.serving.VersionPolicyProto.Specific specific = 3;
  if (has_specific()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::specific(this), output);
  }

  // .adlik.serving.VersionPolicyProto.None none = 4;
  if (has_none()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::none(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.VersionPolicyProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionPolicyProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.VersionPolicyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adlik.serving.VersionPolicyProto.Latest latest = 1;
  if (has_latest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::latest(this), target);
  }

  // .adlik.serving.VersionPolicyProto.All all = 2;
  if (has_all()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::all(this), target);
  }

  // .adlik.serving.VersionPolicyProto.Specific specific = 3;
  if (has_specific()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::specific(this), target);
  }

  // .adlik.serving.VersionPolicyProto.None none = 4;
  if (has_none()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::none(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.VersionPolicyProto)
  return target;
}

size_t VersionPolicyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.VersionPolicyProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (policy_choice_case()) {
    // .adlik.serving.VersionPolicyProto.Latest latest = 1;
    case kLatest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_choice_.latest_);
      break;
    }
    // .adlik.serving.VersionPolicyProto.All all = 2;
    case kAll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_choice_.all_);
      break;
    }
    // .adlik.serving.VersionPolicyProto.Specific specific = 3;
    case kSpecific: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_choice_.specific_);
      break;
    }
    // .adlik.serving.VersionPolicyProto.None none = 4;
    case kNone: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_choice_.none_);
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionPolicyProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.VersionPolicyProto)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionPolicyProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionPolicyProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.VersionPolicyProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.VersionPolicyProto)
    MergeFrom(*source);
  }
}

void VersionPolicyProto::MergeFrom(const VersionPolicyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.VersionPolicyProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.policy_choice_case()) {
    case kLatest: {
      mutable_latest()->::adlik::serving::VersionPolicyProto_Latest::MergeFrom(from.latest());
      break;
    }
    case kAll: {
      mutable_all()->::adlik::serving::VersionPolicyProto_All::MergeFrom(from.all());
      break;
    }
    case kSpecific: {
      mutable_specific()->::adlik::serving::VersionPolicyProto_Specific::MergeFrom(from.specific());
      break;
    }
    case kNone: {
      mutable_none()->::adlik::serving::VersionPolicyProto_None::MergeFrom(from.none());
      break;
    }
    case POLICY_CHOICE_NOT_SET: {
      break;
    }
  }
}

void VersionPolicyProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.VersionPolicyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionPolicyProto::CopyFrom(const VersionPolicyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.VersionPolicyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionPolicyProto::IsInitialized() const {
  return true;
}

void VersionPolicyProto::InternalSwap(VersionPolicyProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(policy_choice_, other->policy_choice_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionPolicyProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace adlik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::adlik::serving::VersionPolicyProto_Latest* Arena::CreateMaybeMessage< ::adlik::serving::VersionPolicyProto_Latest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::VersionPolicyProto_Latest >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::VersionPolicyProto_All* Arena::CreateMaybeMessage< ::adlik::serving::VersionPolicyProto_All >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::VersionPolicyProto_All >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::VersionPolicyProto_None* Arena::CreateMaybeMessage< ::adlik::serving::VersionPolicyProto_None >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::VersionPolicyProto_None >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::VersionPolicyProto_Specific* Arena::CreateMaybeMessage< ::adlik::serving::VersionPolicyProto_Specific >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::VersionPolicyProto_Specific >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::VersionPolicyProto* Arena::CreateMaybeMessage< ::adlik::serving::VersionPolicyProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::VersionPolicyProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
