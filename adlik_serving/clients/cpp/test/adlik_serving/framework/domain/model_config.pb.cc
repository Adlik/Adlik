// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adlik_serving/framework/domain/model_config.proto

#include "adlik_serving/framework/domain/model_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelDynamicBatching_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelInput_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelInstanceGroup_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelOutput_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_VersionPolicyProto_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto;
namespace adlik {
namespace serving {
class ModelInstanceGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelInstanceGroup> _instance;
} _ModelInstanceGroup_default_instance_;
class ModelInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelInput> _instance;
} _ModelInput_default_instance_;
class ModelOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelOutput> _instance;
} _ModelOutput_default_instance_;
class ModelDynamicBatchingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelDynamicBatching> _instance;
} _ModelDynamicBatching_default_instance_;
class ModelConfigProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelConfigProto> _instance;
} _ModelConfigProto_default_instance_;
}  // namespace serving
}  // namespace adlik
static void InitDefaultsscc_info_ModelConfigProto_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_ModelConfigProto_default_instance_;
    new (ptr) ::adlik::serving::ModelConfigProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::ModelConfigProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ModelConfigProto_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_ModelConfigProto_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto}, {
      &scc_info_VersionPolicyProto_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto.base,
      &scc_info_ModelInput_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base,
      &scc_info_ModelOutput_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base,
      &scc_info_ModelDynamicBatching_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base,
      &scc_info_ModelInstanceGroup_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ModelDynamicBatching_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_ModelDynamicBatching_default_instance_;
    new (ptr) ::adlik::serving::ModelDynamicBatching();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::ModelDynamicBatching::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelDynamicBatching_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ModelDynamicBatching_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelInput_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_ModelInput_default_instance_;
    new (ptr) ::adlik::serving::ModelInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::ModelInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelInput_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ModelInput_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelInstanceGroup_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_ModelInstanceGroup_default_instance_;
    new (ptr) ::adlik::serving::ModelInstanceGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::ModelInstanceGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelInstanceGroup_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ModelInstanceGroup_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ModelOutput_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_ModelOutput_default_instance_;
    new (ptr) ::adlik::serving::ModelOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::ModelOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelOutput_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ModelOutput_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelInstanceGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelInstanceGroup, name_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelInstanceGroup, kind_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelInstanceGroup, count_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelInstanceGroup, gpus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelInput, name_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelInput, data_type_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelInput, format_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelInput, dims_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelOutput, name_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelOutput, data_type_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelOutput, dims_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelOutput, label_filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelDynamicBatching, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelDynamicBatching, preferred_batch_size_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelDynamicBatching, max_queue_delay_microseconds_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelDynamicBatching, max_enqueued_batches_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelDynamicBatching, pad_variable_length_inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelConfigProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelConfigProto, name_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelConfigProto, platform_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelConfigProto, platform_version_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelConfigProto, version_policy_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelConfigProto, max_batch_size_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelConfigProto, input_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelConfigProto, output_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelConfigProto, dynamic_batching_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelConfigProto, instance_group_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelConfigProto, algorithm_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::adlik::serving::ModelInstanceGroup)},
  { 9, -1, sizeof(::adlik::serving::ModelInput)},
  { 18, -1, sizeof(::adlik::serving::ModelOutput)},
  { 27, -1, sizeof(::adlik::serving::ModelDynamicBatching)},
  { 36, -1, sizeof(::adlik::serving::ModelConfigProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_ModelInstanceGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_ModelInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_ModelOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_ModelDynamicBatching_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_ModelConfigProto_default_instance_),
};

const char descriptor_table_protodef_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1adlik_serving/framework/domain/model_c"
  "onfig.proto\022\radlik.serving\0323adlik_servin"
  "g/framework/domain/version_policy.proto\032"
  "%tensorflow/core/framework/types.proto\"\250"
  "\001\n\022ModelInstanceGroup\022\014\n\004name\030\001 \001(\t\0224\n\004k"
  "ind\030\004 \001(\0162&.adlik.serving.ModelInstanceG"
  "roup.Kind\022\r\n\005count\030\002 \001(\005\022\014\n\004gpus\030\003 \003(\005\"1"
  "\n\004Kind\022\r\n\tKIND_AUTO\020\000\022\014\n\010KIND_GPU\020\001\022\014\n\010K"
  "IND_CPU\020\002\"\300\001\n\nModelInput\022\014\n\004name\030\001 \001(\t\022\'"
  "\n\tdata_type\030\002 \001(\0162\024.tensorflow.DataType\022"
  "0\n\006format\030\003 \001(\0162 .adlik.serving.ModelInp"
  "ut.Format\022\014\n\004dims\030\004 \003(\003\";\n\006Format\022\017\n\013FOR"
  "MAT_NONE\020\000\022\017\n\013FORMAT_NHWC\020\001\022\017\n\013FORMAT_NC"
  "HW\020\002\"j\n\013ModelOutput\022\014\n\004name\030\001 \001(\t\022\'\n\tdat"
  "a_type\030\002 \001(\0162\024.tensorflow.DataType\022\014\n\004di"
  "ms\030\003 \003(\003\022\026\n\016label_filename\030\004 \001(\t\"\234\001\n\024Mod"
  "elDynamicBatching\022\034\n\024preferred_batch_siz"
  "e\030\001 \003(\005\022$\n\034max_queue_delay_microseconds\030"
  "\002 \001(\005\022\034\n\024max_enqueued_batches\030\003 \001(\005\022\"\n\032p"
  "ad_variable_length_inputs\030\007 \001(\010\"\202\003\n\020Mode"
  "lConfigProto\022\014\n\004name\030\001 \001(\t\022\020\n\010platform\030\002"
  " \001(\t\022\030\n\020platform_version\030\003 \001(\t\0229\n\016versio"
  "n_policy\030\004 \001(\0132!.adlik.serving.VersionPo"
  "licyProto\022\026\n\016max_batch_size\030\005 \001(\005\022(\n\005inp"
  "ut\030\006 \003(\0132\031.adlik.serving.ModelInput\022*\n\006o"
  "utput\030\007 \003(\0132\032.adlik.serving.ModelOutput\022"
  "=\n\020dynamic_batching\030\014 \001(\0132#.adlik.servin"
  "g.ModelDynamicBatching\0229\n\016instance_group"
  "\030\010 \003(\0132!.adlik.serving.ModelInstanceGrou"
  "p\022\021\n\talgorithm\030\024 \001(\tB\003\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto_deps[2] = {
  &::descriptor_table_adlik_5fserving_2fframework_2fdomain_2fversion_5fpolicy_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto_sccs[5] = {
  &scc_info_ModelConfigProto_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base,
  &scc_info_ModelDynamicBatching_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base,
  &scc_info_ModelInput_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base,
  &scc_info_ModelInstanceGroup_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base,
  &scc_info_ModelOutput_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto_once;
static bool descriptor_table_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto = {
  &descriptor_table_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto_initialized, descriptor_table_protodef_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto, "adlik_serving/framework/domain/model_config.proto", 1193,
  &descriptor_table_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto_once, descriptor_table_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto_sccs, descriptor_table_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto::offsets,
  file_level_metadata_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto, 5, file_level_enum_descriptors_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto, file_level_service_descriptors_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto), true);
namespace adlik {
namespace serving {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelInstanceGroup_Kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto);
  return file_level_enum_descriptors_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto[0];
}
bool ModelInstanceGroup_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ModelInstanceGroup_Kind ModelInstanceGroup::KIND_AUTO;
constexpr ModelInstanceGroup_Kind ModelInstanceGroup::KIND_GPU;
constexpr ModelInstanceGroup_Kind ModelInstanceGroup::KIND_CPU;
constexpr ModelInstanceGroup_Kind ModelInstanceGroup::Kind_MIN;
constexpr ModelInstanceGroup_Kind ModelInstanceGroup::Kind_MAX;
constexpr int ModelInstanceGroup::Kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelInput_Format_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto);
  return file_level_enum_descriptors_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto[1];
}
bool ModelInput_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ModelInput_Format ModelInput::FORMAT_NONE;
constexpr ModelInput_Format ModelInput::FORMAT_NHWC;
constexpr ModelInput_Format ModelInput::FORMAT_NCHW;
constexpr ModelInput_Format ModelInput::Format_MIN;
constexpr ModelInput_Format ModelInput::Format_MAX;
constexpr int ModelInput::Format_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ModelInstanceGroup::InitAsDefaultInstance() {
}
class ModelInstanceGroup::_Internal {
 public:
};

ModelInstanceGroup::ModelInstanceGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.ModelInstanceGroup)
}
ModelInstanceGroup::ModelInstanceGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  gpus_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.ModelInstanceGroup)
}
ModelInstanceGroup::ModelInstanceGroup(const ModelInstanceGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      gpus_(from.gpus_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&kind_) -
    reinterpret_cast<char*>(&count_)) + sizeof(kind_));
  // @@protoc_insertion_point(copy_constructor:adlik.serving.ModelInstanceGroup)
}

void ModelInstanceGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelInstanceGroup_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&count_)) + sizeof(kind_));
}

ModelInstanceGroup::~ModelInstanceGroup() {
  // @@protoc_insertion_point(destructor:adlik.serving.ModelInstanceGroup)
  SharedDtor();
}

void ModelInstanceGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelInstanceGroup::ArenaDtor(void* object) {
  ModelInstanceGroup* _this = reinterpret_cast< ModelInstanceGroup* >(object);
  (void)_this;
}
void ModelInstanceGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelInstanceGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelInstanceGroup& ModelInstanceGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelInstanceGroup_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelInstanceGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.ModelInstanceGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gpus_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kind_) -
      reinterpret_cast<char*>(&count_)) + sizeof(kind_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModelInstanceGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "adlik.serving.ModelInstanceGroup.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 gpus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_gpus(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_gpus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .adlik.serving.ModelInstanceGroup.Kind kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_kind(static_cast<::adlik::serving::ModelInstanceGroup_Kind>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModelInstanceGroup::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.ModelInstanceGroup)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "adlik.serving.ModelInstanceGroup.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 gpus = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gpus())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_gpus())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adlik.serving.ModelInstanceGroup.Kind kind = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::adlik::serving::ModelInstanceGroup_Kind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.ModelInstanceGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.ModelInstanceGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModelInstanceGroup::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.ModelInstanceGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.ModelInstanceGroup.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // repeated int32 gpus = 3;
  if (this->gpus_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_gpus_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->gpus_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->gpus(i), output);
  }

  // .adlik.serving.ModelInstanceGroup.Kind kind = 4;
  if (this->kind() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->kind(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.ModelInstanceGroup)
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelInstanceGroup::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.ModelInstanceGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.ModelInstanceGroup.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 count = 2;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // repeated int32 gpus = 3;
  if (this->gpus_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _gpus_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->gpus_, target);
  }

  // .adlik.serving.ModelInstanceGroup.Kind kind = 4;
  if (this->kind() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->kind(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.ModelInstanceGroup)
  return target;
}

size_t ModelInstanceGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.ModelInstanceGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gpus = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->gpus_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gpus_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // .adlik.serving.ModelInstanceGroup.Kind kind = 4;
  if (this->kind() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->kind());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelInstanceGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.ModelInstanceGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelInstanceGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelInstanceGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.ModelInstanceGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.ModelInstanceGroup)
    MergeFrom(*source);
  }
}

void ModelInstanceGroup::MergeFrom(const ModelInstanceGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.ModelInstanceGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gpus_.MergeFrom(from.gpus_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
}

void ModelInstanceGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.ModelInstanceGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInstanceGroup::CopyFrom(const ModelInstanceGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.ModelInstanceGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInstanceGroup::IsInitialized() const {
  return true;
}

void ModelInstanceGroup::InternalSwap(ModelInstanceGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  gpus_.InternalSwap(&other->gpus_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
  swap(kind_, other->kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelInstanceGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelInput::InitAsDefaultInstance() {
}
class ModelInput::_Internal {
 public:
};

ModelInput::ModelInput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.ModelInput)
}
ModelInput::ModelInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  dims_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.ModelInput)
}
ModelInput::ModelInput(const ModelInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dims_(from.dims_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&data_type_, &from.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&data_type_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:adlik.serving.ModelInput)
}

void ModelInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelInput_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(format_));
}

ModelInput::~ModelInput() {
  // @@protoc_insertion_point(destructor:adlik.serving.ModelInput)
  SharedDtor();
}

void ModelInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelInput::ArenaDtor(void* object) {
  ModelInput* _this = reinterpret_cast< ModelInput* >(object);
  (void)_this;
}
void ModelInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelInput& ModelInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelInput_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelInput::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.ModelInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(format_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModelInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "adlik.serving.ModelInput.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DataType data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_data_type(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .adlik.serving.ModelInput.Format format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_format(static_cast<::adlik::serving::ModelInput_Format>(val));
        } else goto handle_unusual;
        continue;
      // repeated int64 dims = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModelInput::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.ModelInput)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "adlik.serving.ModelInput.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DataType data_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adlik.serving.ModelInput.Format format = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_format(static_cast< ::adlik::serving::ModelInput_Format >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 dims = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dims())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 34u, input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.ModelInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.ModelInput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModelInput::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.ModelInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.ModelInput.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .tensorflow.DataType data_type = 2;
  if (this->data_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // .adlik.serving.ModelInput.Format format = 3;
  if (this->format() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->format(), output);
  }

  // repeated int64 dims = 4;
  if (this->dims_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dims_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->dims_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->dims(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.ModelInput)
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelInput::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.ModelInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.ModelInput.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .tensorflow.DataType data_type = 2;
  if (this->data_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // .adlik.serving.ModelInput.Format format = 3;
  if (this->format() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->format(), target);
  }

  // repeated int64 dims = 4;
  if (this->dims_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _dims_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dims_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.ModelInput)
  return target;
}

size_t ModelInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.ModelInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dims = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .tensorflow.DataType data_type = 2;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->data_type());
  }

  // .adlik.serving.ModelInput.Format format = 3;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->format());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.ModelInput)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.ModelInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.ModelInput)
    MergeFrom(*source);
  }
}

void ModelInput::MergeFrom(const ModelInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.ModelInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
}

void ModelInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.ModelInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInput::CopyFrom(const ModelInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.ModelInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInput::IsInitialized() const {
  return true;
}

void ModelInput::InternalSwap(ModelInput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dims_.InternalSwap(&other->dims_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_type_, other->data_type_);
  swap(format_, other->format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelOutput::InitAsDefaultInstance() {
}
class ModelOutput::_Internal {
 public:
};

ModelOutput::ModelOutput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.ModelOutput)
}
ModelOutput::ModelOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  dims_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.ModelOutput)
}
ModelOutput::ModelOutput(const ModelOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dims_(from.dims_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  label_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.label_filename().empty()) {
    label_filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_filename(),
      GetArenaNoVirtual());
  }
  data_type_ = from.data_type_;
  // @@protoc_insertion_point(copy_constructor:adlik.serving.ModelOutput)
}

void ModelOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelOutput_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_type_ = 0;
}

ModelOutput::~ModelOutput() {
  // @@protoc_insertion_point(destructor:adlik.serving.ModelOutput)
  SharedDtor();
}

void ModelOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelOutput::ArenaDtor(void* object) {
  ModelOutput* _this = reinterpret_cast< ModelOutput* >(object);
  (void)_this;
}
void ModelOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelOutput& ModelOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelOutput_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.ModelOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  label_filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  data_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModelOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "adlik.serving.ModelOutput.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorflow.DataType data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_data_type(static_cast<::tensorflow::DataType>(val));
        } else goto handle_unusual;
        continue;
      // repeated int64 dims = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label_filename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_label_filename(), ptr, ctx, "adlik.serving.ModelOutput.label_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModelOutput::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.ModelOutput)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "adlik.serving.ModelOutput.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.DataType data_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::tensorflow::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 dims = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dims())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_dims())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string label_filename = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_label_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->label_filename().data(), static_cast<int>(this->label_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "adlik.serving.ModelOutput.label_filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.ModelOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.ModelOutput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModelOutput::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.ModelOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.ModelOutput.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .tensorflow.DataType data_type = 2;
  if (this->data_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // repeated int64 dims = 3;
  if (this->dims_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dims_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->dims_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->dims(i), output);
  }

  // string label_filename = 4;
  if (this->label_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->label_filename().data(), static_cast<int>(this->label_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.ModelOutput.label_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->label_filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.ModelOutput)
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelOutput::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.ModelOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.ModelOutput.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .tensorflow.DataType data_type = 2;
  if (this->data_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // repeated int64 dims = 3;
  if (this->dims_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _dims_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->dims_, target);
  }

  // string label_filename = 4;
  if (this->label_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->label_filename().data(), static_cast<int>(this->label_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.ModelOutput.label_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->label_filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.ModelOutput)
  return target;
}

size_t ModelOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.ModelOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dims = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dims_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dims_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string label_filename = 4;
  if (this->label_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->label_filename());
  }

  // .tensorflow.DataType data_type = 2;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->data_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.ModelOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.ModelOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.ModelOutput)
    MergeFrom(*source);
  }
}

void ModelOutput::MergeFrom(const ModelOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.ModelOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.label_filename().size() > 0) {
    set_label_filename(from.label_filename());
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
}

void ModelOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.ModelOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelOutput::CopyFrom(const ModelOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.ModelOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelOutput::IsInitialized() const {
  return true;
}

void ModelOutput::InternalSwap(ModelOutput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dims_.InternalSwap(&other->dims_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  label_filename_.Swap(&other->label_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_type_, other->data_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelDynamicBatching::InitAsDefaultInstance() {
}
class ModelDynamicBatching::_Internal {
 public:
};

ModelDynamicBatching::ModelDynamicBatching()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.ModelDynamicBatching)
}
ModelDynamicBatching::ModelDynamicBatching(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  preferred_batch_size_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.ModelDynamicBatching)
}
ModelDynamicBatching::ModelDynamicBatching(const ModelDynamicBatching& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      preferred_batch_size_(from.preferred_batch_size_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_queue_delay_microseconds_, &from.max_queue_delay_microseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&pad_variable_length_inputs_) -
    reinterpret_cast<char*>(&max_queue_delay_microseconds_)) + sizeof(pad_variable_length_inputs_));
  // @@protoc_insertion_point(copy_constructor:adlik.serving.ModelDynamicBatching)
}

void ModelDynamicBatching::SharedCtor() {
  ::memset(&max_queue_delay_microseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pad_variable_length_inputs_) -
      reinterpret_cast<char*>(&max_queue_delay_microseconds_)) + sizeof(pad_variable_length_inputs_));
}

ModelDynamicBatching::~ModelDynamicBatching() {
  // @@protoc_insertion_point(destructor:adlik.serving.ModelDynamicBatching)
  SharedDtor();
}

void ModelDynamicBatching::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void ModelDynamicBatching::ArenaDtor(void* object) {
  ModelDynamicBatching* _this = reinterpret_cast< ModelDynamicBatching* >(object);
  (void)_this;
}
void ModelDynamicBatching::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelDynamicBatching::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelDynamicBatching& ModelDynamicBatching::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelDynamicBatching_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelDynamicBatching::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.ModelDynamicBatching)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  preferred_batch_size_.Clear();
  ::memset(&max_queue_delay_microseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pad_variable_length_inputs_) -
      reinterpret_cast<char*>(&max_queue_delay_microseconds_)) + sizeof(pad_variable_length_inputs_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModelDynamicBatching::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 preferred_batch_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_preferred_batch_size(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_preferred_batch_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_queue_delay_microseconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_queue_delay_microseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_enqueued_batches = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_enqueued_batches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pad_variable_length_inputs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          pad_variable_length_inputs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModelDynamicBatching::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.ModelDynamicBatching)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 preferred_batch_size = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_preferred_batch_size())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_preferred_batch_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_queue_delay_microseconds = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_queue_delay_microseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_enqueued_batches = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_enqueued_batches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool pad_variable_length_inputs = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pad_variable_length_inputs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.ModelDynamicBatching)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.ModelDynamicBatching)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModelDynamicBatching::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.ModelDynamicBatching)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 preferred_batch_size = 1;
  if (this->preferred_batch_size_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_preferred_batch_size_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->preferred_batch_size_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->preferred_batch_size(i), output);
  }

  // int32 max_queue_delay_microseconds = 2;
  if (this->max_queue_delay_microseconds() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->max_queue_delay_microseconds(), output);
  }

  // int32 max_enqueued_batches = 3;
  if (this->max_enqueued_batches() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->max_enqueued_batches(), output);
  }

  // bool pad_variable_length_inputs = 7;
  if (this->pad_variable_length_inputs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->pad_variable_length_inputs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.ModelDynamicBatching)
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelDynamicBatching::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.ModelDynamicBatching)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 preferred_batch_size = 1;
  if (this->preferred_batch_size_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _preferred_batch_size_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->preferred_batch_size_, target);
  }

  // int32 max_queue_delay_microseconds = 2;
  if (this->max_queue_delay_microseconds() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->max_queue_delay_microseconds(), target);
  }

  // int32 max_enqueued_batches = 3;
  if (this->max_enqueued_batches() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->max_enqueued_batches(), target);
  }

  // bool pad_variable_length_inputs = 7;
  if (this->pad_variable_length_inputs() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->pad_variable_length_inputs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.ModelDynamicBatching)
  return target;
}

size_t ModelDynamicBatching::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.ModelDynamicBatching)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 preferred_batch_size = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->preferred_batch_size_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _preferred_batch_size_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 max_queue_delay_microseconds = 2;
  if (this->max_queue_delay_microseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_queue_delay_microseconds());
  }

  // int32 max_enqueued_batches = 3;
  if (this->max_enqueued_batches() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_enqueued_batches());
  }

  // bool pad_variable_length_inputs = 7;
  if (this->pad_variable_length_inputs() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelDynamicBatching::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.ModelDynamicBatching)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelDynamicBatching* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelDynamicBatching>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.ModelDynamicBatching)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.ModelDynamicBatching)
    MergeFrom(*source);
  }
}

void ModelDynamicBatching::MergeFrom(const ModelDynamicBatching& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.ModelDynamicBatching)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  preferred_batch_size_.MergeFrom(from.preferred_batch_size_);
  if (from.max_queue_delay_microseconds() != 0) {
    set_max_queue_delay_microseconds(from.max_queue_delay_microseconds());
  }
  if (from.max_enqueued_batches() != 0) {
    set_max_enqueued_batches(from.max_enqueued_batches());
  }
  if (from.pad_variable_length_inputs() != 0) {
    set_pad_variable_length_inputs(from.pad_variable_length_inputs());
  }
}

void ModelDynamicBatching::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.ModelDynamicBatching)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelDynamicBatching::CopyFrom(const ModelDynamicBatching& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.ModelDynamicBatching)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelDynamicBatching::IsInitialized() const {
  return true;
}

void ModelDynamicBatching::InternalSwap(ModelDynamicBatching* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  preferred_batch_size_.InternalSwap(&other->preferred_batch_size_);
  swap(max_queue_delay_microseconds_, other->max_queue_delay_microseconds_);
  swap(max_enqueued_batches_, other->max_enqueued_batches_);
  swap(pad_variable_length_inputs_, other->pad_variable_length_inputs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelDynamicBatching::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelConfigProto::InitAsDefaultInstance() {
  ::adlik::serving::_ModelConfigProto_default_instance_._instance.get_mutable()->version_policy_ = const_cast< ::adlik::serving::VersionPolicyProto*>(
      ::adlik::serving::VersionPolicyProto::internal_default_instance());
  ::adlik::serving::_ModelConfigProto_default_instance_._instance.get_mutable()->dynamic_batching_ = const_cast< ::adlik::serving::ModelDynamicBatching*>(
      ::adlik::serving::ModelDynamicBatching::internal_default_instance());
}
class ModelConfigProto::_Internal {
 public:
  static const ::adlik::serving::VersionPolicyProto& version_policy(const ModelConfigProto* msg);
  static const ::adlik::serving::ModelDynamicBatching& dynamic_batching(const ModelConfigProto* msg);
};

const ::adlik::serving::VersionPolicyProto&
ModelConfigProto::_Internal::version_policy(const ModelConfigProto* msg) {
  return *msg->version_policy_;
}
const ::adlik::serving::ModelDynamicBatching&
ModelConfigProto::_Internal::dynamic_batching(const ModelConfigProto* msg) {
  return *msg->dynamic_batching_;
}
void ModelConfigProto::unsafe_arena_set_allocated_version_policy(
    ::adlik::serving::VersionPolicyProto* version_policy) {
  if (GetArenaNoVirtual() == nullptr) {
    delete version_policy_;
  }
  version_policy_ = version_policy;
  if (version_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adlik.serving.ModelConfigProto.version_policy)
}
void ModelConfigProto::clear_version_policy() {
  if (GetArenaNoVirtual() == nullptr && version_policy_ != nullptr) {
    delete version_policy_;
  }
  version_policy_ = nullptr;
}
void ModelConfigProto::unsafe_arena_set_allocated_dynamic_batching(
    ::adlik::serving::ModelDynamicBatching* dynamic_batching) {
  if (GetArenaNoVirtual() == nullptr) {
    delete dynamic_batching_;
  }
  dynamic_batching_ = dynamic_batching;
  if (dynamic_batching) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adlik.serving.ModelConfigProto.dynamic_batching)
}
ModelConfigProto::ModelConfigProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.ModelConfigProto)
}
ModelConfigProto::ModelConfigProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  input_(arena),
  output_(arena),
  instance_group_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.ModelConfigProto)
}
ModelConfigProto::ModelConfigProto(const ModelConfigProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      input_(from.input_),
      output_(from.output_),
      instance_group_(from.instance_group_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.platform().empty()) {
    platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.platform(),
      GetArenaNoVirtual());
  }
  platform_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.platform_version().empty()) {
    platform_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.platform_version(),
      GetArenaNoVirtual());
  }
  algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.algorithm().empty()) {
    algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.algorithm(),
      GetArenaNoVirtual());
  }
  if (from.has_version_policy()) {
    version_policy_ = new ::adlik::serving::VersionPolicyProto(*from.version_policy_);
  } else {
    version_policy_ = nullptr;
  }
  if (from.has_dynamic_batching()) {
    dynamic_batching_ = new ::adlik::serving::ModelDynamicBatching(*from.dynamic_batching_);
  } else {
    dynamic_batching_ = nullptr;
  }
  max_batch_size_ = from.max_batch_size_;
  // @@protoc_insertion_point(copy_constructor:adlik.serving.ModelConfigProto)
}

void ModelConfigProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelConfigProto_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_batch_size_) -
      reinterpret_cast<char*>(&version_policy_)) + sizeof(max_batch_size_));
}

ModelConfigProto::~ModelConfigProto() {
  // @@protoc_insertion_point(destructor:adlik.serving.ModelConfigProto)
  SharedDtor();
}

void ModelConfigProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete version_policy_;
  if (this != internal_default_instance()) delete dynamic_batching_;
}

void ModelConfigProto::ArenaDtor(void* object) {
  ModelConfigProto* _this = reinterpret_cast< ModelConfigProto* >(object);
  (void)_this;
}
void ModelConfigProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelConfigProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelConfigProto& ModelConfigProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelConfigProto_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ModelConfigProto::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.ModelConfigProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  output_.Clear();
  instance_group_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  platform_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  platform_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  algorithm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && version_policy_ != nullptr) {
    delete version_policy_;
  }
  version_policy_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dynamic_batching_ != nullptr) {
    delete dynamic_batching_;
  }
  dynamic_batching_ = nullptr;
  max_batch_size_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModelConfigProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "adlik.serving.ModelConfigProto.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string platform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_platform(), ptr, ctx, "adlik.serving.ModelConfigProto.platform");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string platform_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_platform_version(), ptr, ctx, "adlik.serving.ModelConfigProto.platform_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .adlik.serving.VersionPolicyProto version_policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_version_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_batch_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .adlik.serving.ModelInput input = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_input(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .adlik.serving.ModelOutput output = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_output(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .adlik.serving.ModelInstanceGroup instance_group = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_instance_group(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // .adlik.serving.ModelDynamicBatching dynamic_batching = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_dynamic_batching(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string algorithm = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_algorithm(), ptr, ctx, "adlik.serving.ModelConfigProto.algorithm");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModelConfigProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.ModelConfigProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "adlik.serving.ModelConfigProto.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string platform = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->platform().data(), static_cast<int>(this->platform().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "adlik.serving.ModelConfigProto.platform"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string platform_version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_platform_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->platform_version().data(), static_cast<int>(this->platform_version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "adlik.serving.ModelConfigProto.platform_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adlik.serving.VersionPolicyProto version_policy = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_version_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_batch_size = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .adlik.serving.ModelInput input = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .adlik.serving.ModelOutput output = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .adlik.serving.ModelInstanceGroup instance_group = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_instance_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adlik.serving.ModelDynamicBatching dynamic_batching = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dynamic_batching()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string algorithm = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_algorithm()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->algorithm().data(), static_cast<int>(this->algorithm().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "adlik.serving.ModelConfigProto.algorithm"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.ModelConfigProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.ModelConfigProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModelConfigProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.ModelConfigProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.ModelConfigProto.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string platform = 2;
  if (this->platform().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.ModelConfigProto.platform");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->platform(), output);
  }

  // string platform_version = 3;
  if (this->platform_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->platform_version().data(), static_cast<int>(this->platform_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.ModelConfigProto.platform_version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->platform_version(), output);
  }

  // .adlik.serving.VersionPolicyProto version_policy = 4;
  if (this->has_version_policy()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::version_policy(this), output);
  }

  // int32 max_batch_size = 5;
  if (this->max_batch_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->max_batch_size(), output);
  }

  // repeated .adlik.serving.ModelInput input = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->input(static_cast<int>(i)),
      output);
  }

  // repeated .adlik.serving.ModelOutput output = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->output(static_cast<int>(i)),
      output);
  }

  // repeated .adlik.serving.ModelInstanceGroup instance_group = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->instance_group_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->instance_group(static_cast<int>(i)),
      output);
  }

  // .adlik.serving.ModelDynamicBatching dynamic_batching = 12;
  if (this->has_dynamic_batching()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::dynamic_batching(this), output);
  }

  // string algorithm = 20;
  if (this->algorithm().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->algorithm().data(), static_cast<int>(this->algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.ModelConfigProto.algorithm");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->algorithm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.ModelConfigProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelConfigProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.ModelConfigProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.ModelConfigProto.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string platform = 2;
  if (this->platform().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.ModelConfigProto.platform");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->platform(), target);
  }

  // string platform_version = 3;
  if (this->platform_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->platform_version().data(), static_cast<int>(this->platform_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.ModelConfigProto.platform_version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->platform_version(), target);
  }

  // .adlik.serving.VersionPolicyProto version_policy = 4;
  if (this->has_version_policy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::version_policy(this), target);
  }

  // int32 max_batch_size = 5;
  if (this->max_batch_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->max_batch_size(), target);
  }

  // repeated .adlik.serving.ModelInput input = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->input(static_cast<int>(i)), target);
  }

  // repeated .adlik.serving.ModelOutput output = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->output(static_cast<int>(i)), target);
  }

  // repeated .adlik.serving.ModelInstanceGroup instance_group = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->instance_group_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->instance_group(static_cast<int>(i)), target);
  }

  // .adlik.serving.ModelDynamicBatching dynamic_batching = 12;
  if (this->has_dynamic_batching()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::dynamic_batching(this), target);
  }

  // string algorithm = 20;
  if (this->algorithm().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->algorithm().data(), static_cast<int>(this->algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.ModelConfigProto.algorithm");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        20, this->algorithm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.ModelConfigProto)
  return target;
}

size_t ModelConfigProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.ModelConfigProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .adlik.serving.ModelInput input = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->input_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->input(static_cast<int>(i)));
    }
  }

  // repeated .adlik.serving.ModelOutput output = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->output_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->output(static_cast<int>(i)));
    }
  }

  // repeated .adlik.serving.ModelInstanceGroup instance_group = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->instance_group_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->instance_group(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string platform = 2;
  if (this->platform().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->platform());
  }

  // string platform_version = 3;
  if (this->platform_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->platform_version());
  }

  // string algorithm = 20;
  if (this->algorithm().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->algorithm());
  }

  // .adlik.serving.VersionPolicyProto version_policy = 4;
  if (this->has_version_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_policy_);
  }

  // .adlik.serving.ModelDynamicBatching dynamic_batching = 12;
  if (this->has_dynamic_batching()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynamic_batching_);
  }

  // int32 max_batch_size = 5;
  if (this->max_batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_batch_size());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelConfigProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.ModelConfigProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelConfigProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelConfigProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.ModelConfigProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.ModelConfigProto)
    MergeFrom(*source);
  }
}

void ModelConfigProto::MergeFrom(const ModelConfigProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.ModelConfigProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  instance_group_.MergeFrom(from.instance_group_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.platform().size() > 0) {
    set_platform(from.platform());
  }
  if (from.platform_version().size() > 0) {
    set_platform_version(from.platform_version());
  }
  if (from.algorithm().size() > 0) {
    set_algorithm(from.algorithm());
  }
  if (from.has_version_policy()) {
    mutable_version_policy()->::adlik::serving::VersionPolicyProto::MergeFrom(from.version_policy());
  }
  if (from.has_dynamic_batching()) {
    mutable_dynamic_batching()->::adlik::serving::ModelDynamicBatching::MergeFrom(from.dynamic_batching());
  }
  if (from.max_batch_size() != 0) {
    set_max_batch_size(from.max_batch_size());
  }
}

void ModelConfigProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.ModelConfigProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfigProto::CopyFrom(const ModelConfigProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.ModelConfigProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfigProto::IsInitialized() const {
  return true;
}

void ModelConfigProto::InternalSwap(ModelConfigProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&input_)->InternalSwap(CastToBase(&other->input_));
  CastToBase(&output_)->InternalSwap(CastToBase(&other->output_));
  CastToBase(&instance_group_)->InternalSwap(CastToBase(&other->instance_group_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  platform_version_.Swap(&other->platform_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  algorithm_.Swap(&other->algorithm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_policy_, other->version_policy_);
  swap(dynamic_batching_, other->dynamic_batching_);
  swap(max_batch_size_, other->max_batch_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelConfigProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace adlik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::adlik::serving::ModelInstanceGroup* Arena::CreateMaybeMessage< ::adlik::serving::ModelInstanceGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::ModelInstanceGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::ModelInput* Arena::CreateMaybeMessage< ::adlik::serving::ModelInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::ModelInput >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::ModelOutput* Arena::CreateMaybeMessage< ::adlik::serving::ModelOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::ModelOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::ModelDynamicBatching* Arena::CreateMaybeMessage< ::adlik::serving::ModelDynamicBatching >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::ModelDynamicBatching >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::ModelConfigProto* Arena::CreateMaybeMessage< ::adlik::serving::ModelConfigProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::ModelConfigProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
