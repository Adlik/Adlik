// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: adlik_serving/apis/predict_service.proto

#include "adlik_serving/apis/predict_service.pb.h"
#include "adlik_serving/apis/predict_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace adlik {
namespace serving {

static const char* PredictService_method_names[] = {
  "/adlik.serving.PredictService/predict",
  "/adlik.serving.PredictService/getModelMeta",
};

std::unique_ptr< PredictService::Stub> PredictService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PredictService::Stub> stub(new PredictService::Stub(channel, options));
  return stub;
}

PredictService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_predict_(PredictService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getModelMeta_(PredictService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PredictService::Stub::predict(::grpc::ClientContext* context, const ::adlik::serving::PredictRequest& request, ::adlik::serving::PredictResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::adlik::serving::PredictRequest, ::adlik::serving::PredictResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_predict_, context, request, response);
}

void PredictService::Stub::experimental_async::predict(::grpc::ClientContext* context, const ::adlik::serving::PredictRequest* request, ::adlik::serving::PredictResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::adlik::serving::PredictRequest, ::adlik::serving::PredictResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_predict_, context, request, response, std::move(f));
}

void PredictService::Stub::experimental_async::predict(::grpc::ClientContext* context, const ::adlik::serving::PredictRequest* request, ::adlik::serving::PredictResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_predict_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::adlik::serving::PredictResponse>* PredictService::Stub::PrepareAsyncpredictRaw(::grpc::ClientContext* context, const ::adlik::serving::PredictRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::adlik::serving::PredictResponse, ::adlik::serving::PredictRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_predict_, context, request);
}

::grpc::ClientAsyncResponseReader< ::adlik::serving::PredictResponse>* PredictService::Stub::AsyncpredictRaw(::grpc::ClientContext* context, const ::adlik::serving::PredictRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncpredictRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PredictService::Stub::getModelMeta(::grpc::ClientContext* context, const ::adlik::serving::GetModelMetaRequest& request, ::adlik::serving::GetModelMetaResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::adlik::serving::GetModelMetaRequest, ::adlik::serving::GetModelMetaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getModelMeta_, context, request, response);
}

void PredictService::Stub::experimental_async::getModelMeta(::grpc::ClientContext* context, const ::adlik::serving::GetModelMetaRequest* request, ::adlik::serving::GetModelMetaResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::adlik::serving::GetModelMetaRequest, ::adlik::serving::GetModelMetaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getModelMeta_, context, request, response, std::move(f));
}

void PredictService::Stub::experimental_async::getModelMeta(::grpc::ClientContext* context, const ::adlik::serving::GetModelMetaRequest* request, ::adlik::serving::GetModelMetaResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getModelMeta_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::adlik::serving::GetModelMetaResponse>* PredictService::Stub::PrepareAsyncgetModelMetaRaw(::grpc::ClientContext* context, const ::adlik::serving::GetModelMetaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::adlik::serving::GetModelMetaResponse, ::adlik::serving::GetModelMetaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getModelMeta_, context, request);
}

::grpc::ClientAsyncResponseReader< ::adlik::serving::GetModelMetaResponse>* PredictService::Stub::AsyncgetModelMetaRaw(::grpc::ClientContext* context, const ::adlik::serving::GetModelMetaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetModelMetaRaw(context, request, cq);
  result->StartCall();
  return result;
}

PredictService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PredictService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PredictService::Service, ::adlik::serving::PredictRequest, ::adlik::serving::PredictResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PredictService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::adlik::serving::PredictRequest* req,
             ::adlik::serving::PredictResponse* resp) {
               return service->predict(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PredictService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PredictService::Service, ::adlik::serving::GetModelMetaRequest, ::adlik::serving::GetModelMetaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PredictService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::adlik::serving::GetModelMetaRequest* req,
             ::adlik::serving::GetModelMetaResponse* resp) {
               return service->getModelMeta(ctx, req, resp);
             }, this)));
}

PredictService::Service::~Service() {
}

::grpc::Status PredictService::Service::predict(::grpc::ServerContext* context, const ::adlik::serving::PredictRequest* request, ::adlik::serving::PredictResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PredictService::Service::getModelMeta(::grpc::ServerContext* context, const ::adlik::serving::GetModelMetaRequest* request, ::adlik::serving::GetModelMetaResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace adlik
}  // namespace serving

