// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adlik_serving/apis/predict.proto

#include "adlik_serving/apis/predict.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fframework_2fdomain_2fmodel_5fspec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelSpec_adlik_5fserving_2fframework_2fdomain_2fmodel_5fspec_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fapis_2fpredict_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PredictRequest_Class_adlik_5fserving_2fapis_2fpredict_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fapis_2fpredict_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictRequest_InputsEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fapis_2fpredict_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictRequest_Output_adlik_5fserving_2fapis_2fpredict_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fapis_2fpredict_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictRequest_OutputFilterEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fapis_2fpredict_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PredictResponse_Class_adlik_5fserving_2fapis_2fpredict_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fapis_2fpredict_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictResponse_Classes_adlik_5fserving_2fapis_2fpredict_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fapis_2fpredict_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PredictResponse_Output_adlik_5fserving_2fapis_2fpredict_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fapis_2fpredict_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictResponse_OutputsEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fframework_2ftensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto;
namespace adlik {
namespace serving {
class PredictRequest_InputsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictRequest_InputsEntry_DoNotUse> _instance;
} _PredictRequest_InputsEntry_DoNotUse_default_instance_;
class PredictRequest_ClassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictRequest_Class> _instance;
} _PredictRequest_Class_default_instance_;
class PredictRequest_OutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictRequest_Output> _instance;
} _PredictRequest_Output_default_instance_;
class PredictRequest_OutputFilterEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictRequest_OutputFilterEntry_DoNotUse> _instance;
} _PredictRequest_OutputFilterEntry_DoNotUse_default_instance_;
class PredictRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictRequest> _instance;
} _PredictRequest_default_instance_;
class PredictResponse_ClassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictResponse_Class> _instance;
} _PredictResponse_Class_default_instance_;
class PredictResponse_ClassesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictResponse_Classes> _instance;
} _PredictResponse_Classes_default_instance_;
class PredictResponse_OutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictResponse_Output> _instance;
} _PredictResponse_Output_default_instance_;
class PredictResponse_OutputsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictResponse_OutputsEntry_DoNotUse> _instance;
} _PredictResponse_OutputsEntry_DoNotUse_default_instance_;
class PredictResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredictResponse> _instance;
} _PredictResponse_default_instance_;
}  // namespace serving
}  // namespace adlik
static void InitDefaultsscc_info_PredictRequest_adlik_5fserving_2fapis_2fpredict_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_PredictRequest_default_instance_;
    new (ptr) ::adlik::serving::PredictRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::PredictRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PredictRequest_adlik_5fserving_2fapis_2fpredict_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_PredictRequest_adlik_5fserving_2fapis_2fpredict_2eproto}, {
      &scc_info_ModelSpec_adlik_5fserving_2fframework_2fdomain_2fmodel_5fspec_2eproto.base,
      &scc_info_PredictRequest_InputsEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto.base,
      &scc_info_PredictRequest_OutputFilterEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto.base,}};

static void InitDefaultsscc_info_PredictRequest_Class_adlik_5fserving_2fapis_2fpredict_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_PredictRequest_Class_default_instance_;
    new (ptr) ::adlik::serving::PredictRequest_Class();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::PredictRequest_Class::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PredictRequest_Class_adlik_5fserving_2fapis_2fpredict_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PredictRequest_Class_adlik_5fserving_2fapis_2fpredict_2eproto}, {}};

static void InitDefaultsscc_info_PredictRequest_InputsEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_PredictRequest_InputsEntry_DoNotUse_default_instance_;
    new (ptr) ::adlik::serving::PredictRequest_InputsEntry_DoNotUse();
  }
  ::adlik::serving::PredictRequest_InputsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictRequest_InputsEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PredictRequest_InputsEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto}, {
      &scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto.base,}};

static void InitDefaultsscc_info_PredictRequest_Output_adlik_5fserving_2fapis_2fpredict_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_PredictRequest_Output_default_instance_;
    new (ptr) ::adlik::serving::PredictRequest_Output();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::PredictRequest_Output::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictRequest_Output_adlik_5fserving_2fapis_2fpredict_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PredictRequest_Output_adlik_5fserving_2fapis_2fpredict_2eproto}, {
      &scc_info_PredictRequest_Class_adlik_5fserving_2fapis_2fpredict_2eproto.base,}};

static void InitDefaultsscc_info_PredictRequest_OutputFilterEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_PredictRequest_OutputFilterEntry_DoNotUse_default_instance_;
    new (ptr) ::adlik::serving::PredictRequest_OutputFilterEntry_DoNotUse();
  }
  ::adlik::serving::PredictRequest_OutputFilterEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictRequest_OutputFilterEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PredictRequest_OutputFilterEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto}, {
      &scc_info_PredictRequest_Output_adlik_5fserving_2fapis_2fpredict_2eproto.base,}};

static void InitDefaultsscc_info_PredictResponse_adlik_5fserving_2fapis_2fpredict_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_PredictResponse_default_instance_;
    new (ptr) ::adlik::serving::PredictResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::PredictResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PredictResponse_adlik_5fserving_2fapis_2fpredict_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PredictResponse_adlik_5fserving_2fapis_2fpredict_2eproto}, {
      &scc_info_ModelSpec_adlik_5fserving_2fframework_2fdomain_2fmodel_5fspec_2eproto.base,
      &scc_info_PredictResponse_OutputsEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto.base,}};

static void InitDefaultsscc_info_PredictResponse_Class_adlik_5fserving_2fapis_2fpredict_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_PredictResponse_Class_default_instance_;
    new (ptr) ::adlik::serving::PredictResponse_Class();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::PredictResponse_Class::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PredictResponse_Class_adlik_5fserving_2fapis_2fpredict_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PredictResponse_Class_adlik_5fserving_2fapis_2fpredict_2eproto}, {}};

static void InitDefaultsscc_info_PredictResponse_Classes_adlik_5fserving_2fapis_2fpredict_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_PredictResponse_Classes_default_instance_;
    new (ptr) ::adlik::serving::PredictResponse_Classes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::PredictResponse_Classes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictResponse_Classes_adlik_5fserving_2fapis_2fpredict_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PredictResponse_Classes_adlik_5fserving_2fapis_2fpredict_2eproto}, {
      &scc_info_PredictResponse_Class_adlik_5fserving_2fapis_2fpredict_2eproto.base,}};

static void InitDefaultsscc_info_PredictResponse_Output_adlik_5fserving_2fapis_2fpredict_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_PredictResponse_Output_default_instance_;
    new (ptr) ::adlik::serving::PredictResponse_Output();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::PredictResponse_Output::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PredictResponse_Output_adlik_5fserving_2fapis_2fpredict_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PredictResponse_Output_adlik_5fserving_2fapis_2fpredict_2eproto}, {
      &scc_info_TensorProto_tensorflow_2fcore_2fframework_2ftensor_2eproto.base,
      &scc_info_PredictResponse_Classes_adlik_5fserving_2fapis_2fpredict_2eproto.base,}};

static void InitDefaultsscc_info_PredictResponse_OutputsEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_PredictResponse_OutputsEntry_DoNotUse_default_instance_;
    new (ptr) ::adlik::serving::PredictResponse_OutputsEntry_DoNotUse();
  }
  ::adlik::serving::PredictResponse_OutputsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PredictResponse_OutputsEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PredictResponse_OutputsEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto}, {
      &scc_info_PredictResponse_Output_adlik_5fserving_2fapis_2fpredict_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_adlik_5fserving_2fapis_2fpredict_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_adlik_5fserving_2fapis_2fpredict_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_adlik_5fserving_2fapis_2fpredict_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_adlik_5fserving_2fapis_2fpredict_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest_InputsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest_InputsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest_InputsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest_InputsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest_Class, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest_Class, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest_Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest_Output, cls_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest_OutputFilterEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest_OutputFilterEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest_OutputFilterEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest_OutputFilterEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest, model_spec_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest, inputs_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest, batch_size_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictRequest, output_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictResponse_Class, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictResponse_Class, idx_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictResponse_Class, score_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictResponse_Class, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictResponse_Classes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictResponse_Classes, cls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictResponse_Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictResponse_Output, tensor_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictResponse_Output, batch_classes_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictResponse_OutputsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictResponse_OutputsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictResponse_OutputsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictResponse_OutputsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictResponse, model_spec_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::PredictResponse, outputs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::adlik::serving::PredictRequest_InputsEntry_DoNotUse)},
  { 9, -1, sizeof(::adlik::serving::PredictRequest_Class)},
  { 15, -1, sizeof(::adlik::serving::PredictRequest_Output)},
  { 21, 28, sizeof(::adlik::serving::PredictRequest_OutputFilterEntry_DoNotUse)},
  { 30, -1, sizeof(::adlik::serving::PredictRequest)},
  { 39, -1, sizeof(::adlik::serving::PredictResponse_Class)},
  { 47, -1, sizeof(::adlik::serving::PredictResponse_Classes)},
  { 53, -1, sizeof(::adlik::serving::PredictResponse_Output)},
  { 60, 67, sizeof(::adlik::serving::PredictResponse_OutputsEntry_DoNotUse)},
  { 69, -1, sizeof(::adlik::serving::PredictResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_PredictRequest_InputsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_PredictRequest_Class_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_PredictRequest_Output_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_PredictRequest_OutputFilterEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_PredictRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_PredictResponse_Class_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_PredictResponse_Classes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_PredictResponse_Output_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_PredictResponse_OutputsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_PredictResponse_default_instance_),
};

const char descriptor_table_protodef_adlik_5fserving_2fapis_2fpredict_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n adlik_serving/apis/predict.proto\022\radli"
  "k.serving\032&tensorflow/core/framework/ten"
  "sor.proto\032/adlik_serving/framework/domai"
  "n/model_spec.proto\"\314\003\n\016PredictRequest\022,\n"
  "\nmodel_spec\030\001 \001(\0132\030.adlik.serving.ModelS"
  "pec\0229\n\006inputs\030\002 \003(\0132).adlik.serving.Pred"
  "ictRequest.InputsEntry\022\022\n\nbatch_size\030\003 \001"
  "(\r\022F\n\routput_filter\030\004 \003(\0132/.adlik.servin"
  "g.PredictRequest.OutputFilterEntry\032F\n\013In"
  "putsEntry\022\013\n\003key\030\001 \001(\t\022&\n\005value\030\002 \001(\0132\027."
  "tensorflow.TensorProto:\0028\001\032\026\n\005Class\022\r\n\005c"
  "ount\030\001 \001(\r\032:\n\006Output\0220\n\003cls\030\001 \001(\0132#.adli"
  "k.serving.PredictRequest.Class\032Y\n\021Output"
  "FilterEntry\022\013\n\003key\030\001 \001(\t\0223\n\005value\030\002 \001(\0132"
  "$.adlik.serving.PredictRequest.Output:\0028"
  "\001\"\270\003\n\017PredictResponse\022,\n\nmodel_spec\030\001 \001("
  "\0132\030.adlik.serving.ModelSpec\022<\n\007outputs\030\002"
  " \003(\0132+.adlik.serving.PredictResponse.Out"
  "putsEntry\0322\n\005Class\022\013\n\003idx\030\001 \001(\005\022\r\n\005score"
  "\030\002 \001(\002\022\r\n\005label\030\003 \001(\t\032<\n\007Classes\0221\n\003cls\030"
  "\001 \003(\0132$.adlik.serving.PredictResponse.Cl"
  "ass\032p\n\006Output\022\'\n\006tensor\030\001 \001(\0132\027.tensorfl"
  "ow.TensorProto\022=\n\rbatch_classes\030\002 \003(\0132&."
  "adlik.serving.PredictResponse.Classes\032U\n"
  "\014OutputsEntry\022\013\n\003key\030\001 \001(\t\0224\n\005value\030\002 \001("
  "\0132%.adlik.serving.PredictResponse.Output"
  ":\0028\001B\003\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_adlik_5fserving_2fapis_2fpredict_2eproto_deps[2] = {
  &::descriptor_table_adlik_5fserving_2fframework_2fdomain_2fmodel_5fspec_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_adlik_5fserving_2fapis_2fpredict_2eproto_sccs[10] = {
  &scc_info_PredictRequest_adlik_5fserving_2fapis_2fpredict_2eproto.base,
  &scc_info_PredictRequest_Class_adlik_5fserving_2fapis_2fpredict_2eproto.base,
  &scc_info_PredictRequest_InputsEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto.base,
  &scc_info_PredictRequest_Output_adlik_5fserving_2fapis_2fpredict_2eproto.base,
  &scc_info_PredictRequest_OutputFilterEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto.base,
  &scc_info_PredictResponse_adlik_5fserving_2fapis_2fpredict_2eproto.base,
  &scc_info_PredictResponse_Class_adlik_5fserving_2fapis_2fpredict_2eproto.base,
  &scc_info_PredictResponse_Classes_adlik_5fserving_2fapis_2fpredict_2eproto.base,
  &scc_info_PredictResponse_Output_adlik_5fserving_2fapis_2fpredict_2eproto.base,
  &scc_info_PredictResponse_OutputsEntry_DoNotUse_adlik_5fserving_2fapis_2fpredict_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_adlik_5fserving_2fapis_2fpredict_2eproto_once;
static bool descriptor_table_adlik_5fserving_2fapis_2fpredict_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_adlik_5fserving_2fapis_2fpredict_2eproto = {
  &descriptor_table_adlik_5fserving_2fapis_2fpredict_2eproto_initialized, descriptor_table_protodef_adlik_5fserving_2fapis_2fpredict_2eproto, "adlik_serving/apis/predict.proto", 1057,
  &descriptor_table_adlik_5fserving_2fapis_2fpredict_2eproto_once, descriptor_table_adlik_5fserving_2fapis_2fpredict_2eproto_sccs, descriptor_table_adlik_5fserving_2fapis_2fpredict_2eproto_deps, 10, 2,
  schemas, file_default_instances, TableStruct_adlik_5fserving_2fapis_2fpredict_2eproto::offsets,
  file_level_metadata_adlik_5fserving_2fapis_2fpredict_2eproto, 10, file_level_enum_descriptors_adlik_5fserving_2fapis_2fpredict_2eproto, file_level_service_descriptors_adlik_5fserving_2fapis_2fpredict_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_adlik_5fserving_2fapis_2fpredict_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_adlik_5fserving_2fapis_2fpredict_2eproto), true);
namespace adlik {
namespace serving {

// ===================================================================

PredictRequest_InputsEntry_DoNotUse::PredictRequest_InputsEntry_DoNotUse() {}
PredictRequest_InputsEntry_DoNotUse::PredictRequest_InputsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PredictRequest_InputsEntry_DoNotUse::MergeFrom(const PredictRequest_InputsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PredictRequest_InputsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PredictRequest_InputsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PredictRequest_Class::InitAsDefaultInstance() {
}
class PredictRequest_Class::_Internal {
 public:
};

PredictRequest_Class::PredictRequest_Class()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.PredictRequest.Class)
}
PredictRequest_Class::PredictRequest_Class(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.PredictRequest.Class)
}
PredictRequest_Class::PredictRequest_Class(const PredictRequest_Class& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:adlik.serving.PredictRequest.Class)
}

void PredictRequest_Class::SharedCtor() {
  count_ = 0u;
}

PredictRequest_Class::~PredictRequest_Class() {
  // @@protoc_insertion_point(destructor:adlik.serving.PredictRequest.Class)
  SharedDtor();
}

void PredictRequest_Class::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void PredictRequest_Class::ArenaDtor(void* object) {
  PredictRequest_Class* _this = reinterpret_cast< PredictRequest_Class* >(object);
  (void)_this;
}
void PredictRequest_Class::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PredictRequest_Class::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictRequest_Class& PredictRequest_Class::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictRequest_Class_adlik_5fserving_2fapis_2fpredict_2eproto.base);
  return *internal_default_instance();
}


void PredictRequest_Class::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.PredictRequest.Class)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictRequest_Class::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictRequest_Class::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.PredictRequest.Class)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.PredictRequest.Class)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.PredictRequest.Class)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictRequest_Class::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.PredictRequest.Class)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.PredictRequest.Class)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictRequest_Class::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.PredictRequest.Class)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.PredictRequest.Class)
  return target;
}

size_t PredictRequest_Class::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.PredictRequest.Class)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictRequest_Class::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.PredictRequest.Class)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictRequest_Class* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictRequest_Class>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.PredictRequest.Class)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.PredictRequest.Class)
    MergeFrom(*source);
  }
}

void PredictRequest_Class::MergeFrom(const PredictRequest_Class& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.PredictRequest.Class)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    set_count(from.count());
  }
}

void PredictRequest_Class::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.PredictRequest.Class)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictRequest_Class::CopyFrom(const PredictRequest_Class& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.PredictRequest.Class)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictRequest_Class::IsInitialized() const {
  return true;
}

void PredictRequest_Class::InternalSwap(PredictRequest_Class* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictRequest_Class::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictRequest_Output::InitAsDefaultInstance() {
  ::adlik::serving::_PredictRequest_Output_default_instance_._instance.get_mutable()->cls_ = const_cast< ::adlik::serving::PredictRequest_Class*>(
      ::adlik::serving::PredictRequest_Class::internal_default_instance());
}
class PredictRequest_Output::_Internal {
 public:
  static const ::adlik::serving::PredictRequest_Class& cls(const PredictRequest_Output* msg);
};

const ::adlik::serving::PredictRequest_Class&
PredictRequest_Output::_Internal::cls(const PredictRequest_Output* msg) {
  return *msg->cls_;
}
void PredictRequest_Output::unsafe_arena_set_allocated_cls(
    ::adlik::serving::PredictRequest_Class* cls) {
  if (GetArenaNoVirtual() == nullptr) {
    delete cls_;
  }
  cls_ = cls;
  if (cls) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adlik.serving.PredictRequest.Output.cls)
}
PredictRequest_Output::PredictRequest_Output()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.PredictRequest.Output)
}
PredictRequest_Output::PredictRequest_Output(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.PredictRequest.Output)
}
PredictRequest_Output::PredictRequest_Output(const PredictRequest_Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cls()) {
    cls_ = new ::adlik::serving::PredictRequest_Class(*from.cls_);
  } else {
    cls_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:adlik.serving.PredictRequest.Output)
}

void PredictRequest_Output::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictRequest_Output_adlik_5fserving_2fapis_2fpredict_2eproto.base);
  cls_ = nullptr;
}

PredictRequest_Output::~PredictRequest_Output() {
  // @@protoc_insertion_point(destructor:adlik.serving.PredictRequest.Output)
  SharedDtor();
}

void PredictRequest_Output::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete cls_;
}

void PredictRequest_Output::ArenaDtor(void* object) {
  PredictRequest_Output* _this = reinterpret_cast< PredictRequest_Output* >(object);
  (void)_this;
}
void PredictRequest_Output::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PredictRequest_Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictRequest_Output& PredictRequest_Output::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictRequest_Output_adlik_5fserving_2fapis_2fpredict_2eproto.base);
  return *internal_default_instance();
}


void PredictRequest_Output::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.PredictRequest.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && cls_ != nullptr) {
    delete cls_;
  }
  cls_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictRequest_Output::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .adlik.serving.PredictRequest.Class cls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_cls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictRequest_Output::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.PredictRequest.Output)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .adlik.serving.PredictRequest.Class cls = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.PredictRequest.Output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.PredictRequest.Output)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictRequest_Output::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.PredictRequest.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adlik.serving.PredictRequest.Class cls = 1;
  if (this->has_cls()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::cls(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.PredictRequest.Output)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictRequest_Output::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.PredictRequest.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adlik.serving.PredictRequest.Class cls = 1;
  if (this->has_cls()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::cls(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.PredictRequest.Output)
  return target;
}

size_t PredictRequest_Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.PredictRequest.Output)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .adlik.serving.PredictRequest.Class cls = 1;
  if (this->has_cls()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cls_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictRequest_Output::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.PredictRequest.Output)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictRequest_Output* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictRequest_Output>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.PredictRequest.Output)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.PredictRequest.Output)
    MergeFrom(*source);
  }
}

void PredictRequest_Output::MergeFrom(const PredictRequest_Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.PredictRequest.Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cls()) {
    mutable_cls()->::adlik::serving::PredictRequest_Class::MergeFrom(from.cls());
  }
}

void PredictRequest_Output::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.PredictRequest.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictRequest_Output::CopyFrom(const PredictRequest_Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.PredictRequest.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictRequest_Output::IsInitialized() const {
  return true;
}

void PredictRequest_Output::InternalSwap(PredictRequest_Output* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cls_, other->cls_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictRequest_Output::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PredictRequest_OutputFilterEntry_DoNotUse::PredictRequest_OutputFilterEntry_DoNotUse() {}
PredictRequest_OutputFilterEntry_DoNotUse::PredictRequest_OutputFilterEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PredictRequest_OutputFilterEntry_DoNotUse::MergeFrom(const PredictRequest_OutputFilterEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PredictRequest_OutputFilterEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PredictRequest_OutputFilterEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PredictRequest::InitAsDefaultInstance() {
  ::adlik::serving::_PredictRequest_default_instance_._instance.get_mutable()->model_spec_ = const_cast< ::adlik::serving::ModelSpec*>(
      ::adlik::serving::ModelSpec::internal_default_instance());
}
class PredictRequest::_Internal {
 public:
  static const ::adlik::serving::ModelSpec& model_spec(const PredictRequest* msg);
};

const ::adlik::serving::ModelSpec&
PredictRequest::_Internal::model_spec(const PredictRequest* msg) {
  return *msg->model_spec_;
}
void PredictRequest::unsafe_arena_set_allocated_model_spec(
    ::adlik::serving::ModelSpec* model_spec) {
  if (GetArenaNoVirtual() == nullptr) {
    delete model_spec_;
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adlik.serving.PredictRequest.model_spec)
}
void PredictRequest::clear_model_spec() {
  if (GetArenaNoVirtual() == nullptr && model_spec_ != nullptr) {
    delete model_spec_;
  }
  model_spec_ = nullptr;
}
void PredictRequest::clear_inputs() {
  inputs_.Clear();
}
PredictRequest::PredictRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.PredictRequest)
}
PredictRequest::PredictRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  inputs_(arena),
  output_filter_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.PredictRequest)
}
PredictRequest::PredictRequest(const PredictRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inputs_.MergeFrom(from.inputs_);
  output_filter_.MergeFrom(from.output_filter_);
  if (from.has_model_spec()) {
    model_spec_ = new ::adlik::serving::ModelSpec(*from.model_spec_);
  } else {
    model_spec_ = nullptr;
  }
  batch_size_ = from.batch_size_;
  // @@protoc_insertion_point(copy_constructor:adlik.serving.PredictRequest)
}

void PredictRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictRequest_adlik_5fserving_2fapis_2fpredict_2eproto.base);
  ::memset(&model_spec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&batch_size_) -
      reinterpret_cast<char*>(&model_spec_)) + sizeof(batch_size_));
}

PredictRequest::~PredictRequest() {
  // @@protoc_insertion_point(destructor:adlik.serving.PredictRequest)
  SharedDtor();
}

void PredictRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete model_spec_;
}

void PredictRequest::ArenaDtor(void* object) {
  PredictRequest* _this = reinterpret_cast< PredictRequest* >(object);
  (void)_this;
}
void PredictRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PredictRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictRequest& PredictRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictRequest_adlik_5fserving_2fapis_2fpredict_2eproto.base);
  return *internal_default_instance();
}


void PredictRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.PredictRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  output_filter_.Clear();
  if (GetArenaNoVirtual() == nullptr && model_spec_ != nullptr) {
    delete model_spec_;
  }
  model_spec_ = nullptr;
  batch_size_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .adlik.serving.ModelSpec model_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_model_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .tensorflow.TensorProto> inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&inputs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // uint32 batch_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .adlik.serving.PredictRequest.Output> output_filter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&output_filter_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.PredictRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .adlik.serving.ModelSpec model_spec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_model_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .tensorflow.TensorProto> inputs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          PredictRequest_InputsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              PredictRequest_InputsEntry_DoNotUse,
              std::string, ::tensorflow::TensorProto,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorProto > > parser(&inputs_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "adlik.serving.PredictRequest.InputsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 batch_size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .adlik.serving.PredictRequest.Output> output_filter = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          PredictRequest_OutputFilterEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              PredictRequest_OutputFilterEntry_DoNotUse,
              std::string, ::adlik::serving::PredictRequest_Output,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictRequest_Output > > parser(&output_filter_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "adlik.serving.PredictRequest.OutputFilterEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.PredictRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.PredictRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.PredictRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adlik.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::model_spec(this), output);
  }

  // map<string, .tensorflow.TensorProto> inputs = 2;
  if (!this->inputs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorProto >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "adlik.serving.PredictRequest.InputsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->inputs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->inputs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorProto >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorProto >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        PredictRequest_InputsEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorProto >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it) {
        PredictRequest_InputsEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // uint32 batch_size = 3;
  if (this->batch_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->batch_size(), output);
  }

  // map<string, .adlik.serving.PredictRequest.Output> output_filter = 4;
  if (!this->output_filter().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictRequest_Output >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "adlik.serving.PredictRequest.OutputFilterEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->output_filter().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->output_filter().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictRequest_Output >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictRequest_Output >::const_iterator
          it = this->output_filter().begin();
          it != this->output_filter().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        PredictRequest_OutputFilterEntry_DoNotUse::Funcs::SerializeToCodedStream(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictRequest_Output >::const_iterator
          it = this->output_filter().begin();
          it != this->output_filter().end(); ++it) {
        PredictRequest_OutputFilterEntry_DoNotUse::Funcs::SerializeToCodedStream(4, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.PredictRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.PredictRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adlik.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::model_spec(this), target);
  }

  // map<string, .tensorflow.TensorProto> inputs = 2;
  if (!this->inputs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorProto >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "adlik.serving.PredictRequest.InputsEntry.key");
      }
    };

    if (false &&
        this->inputs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->inputs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorProto >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorProto >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PredictRequest_InputsEntry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorProto >::const_iterator
          it = this->inputs().begin();
          it != this->inputs().end(); ++it) {
        target = PredictRequest_InputsEntry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // uint32 batch_size = 3;
  if (this->batch_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->batch_size(), target);
  }

  // map<string, .adlik.serving.PredictRequest.Output> output_filter = 4;
  if (!this->output_filter().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictRequest_Output >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "adlik.serving.PredictRequest.OutputFilterEntry.key");
      }
    };

    if (false &&
        this->output_filter().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->output_filter().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictRequest_Output >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictRequest_Output >::const_iterator
          it = this->output_filter().begin();
          it != this->output_filter().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PredictRequest_OutputFilterEntry_DoNotUse::Funcs::SerializeToArray(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictRequest_Output >::const_iterator
          it = this->output_filter().begin();
          it != this->output_filter().end(); ++it) {
        target = PredictRequest_OutputFilterEntry_DoNotUse::Funcs::SerializeToArray(4, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.PredictRequest)
  return target;
}

size_t PredictRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.PredictRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .tensorflow.TensorProto> inputs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->inputs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::TensorProto >::const_iterator
      it = this->inputs().begin();
      it != this->inputs().end(); ++it) {
    total_size += PredictRequest_InputsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .adlik.serving.PredictRequest.Output> output_filter = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->output_filter_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictRequest_Output >::const_iterator
      it = this->output_filter().begin();
      it != this->output_filter().end(); ++it) {
    total_size += PredictRequest_OutputFilterEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .adlik.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_spec_);
  }

  // uint32 batch_size = 3;
  if (this->batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->batch_size());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.PredictRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.PredictRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.PredictRequest)
    MergeFrom(*source);
  }
}

void PredictRequest::MergeFrom(const PredictRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.PredictRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  output_filter_.MergeFrom(from.output_filter_);
  if (from.has_model_spec()) {
    mutable_model_spec()->::adlik::serving::ModelSpec::MergeFrom(from.model_spec());
  }
  if (from.batch_size() != 0) {
    set_batch_size(from.batch_size());
  }
}

void PredictRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.PredictRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictRequest::CopyFrom(const PredictRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.PredictRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictRequest::IsInitialized() const {
  return true;
}

void PredictRequest::InternalSwap(PredictRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  inputs_.Swap(&other->inputs_);
  output_filter_.Swap(&other->output_filter_);
  swap(model_spec_, other->model_spec_);
  swap(batch_size_, other->batch_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictResponse_Class::InitAsDefaultInstance() {
}
class PredictResponse_Class::_Internal {
 public:
};

PredictResponse_Class::PredictResponse_Class()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.PredictResponse.Class)
}
PredictResponse_Class::PredictResponse_Class(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.PredictResponse.Class)
}
PredictResponse_Class::PredictResponse_Class(const PredictResponse_Class& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.label().empty()) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label(),
      GetArenaNoVirtual());
  }
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:adlik.serving.PredictResponse.Class)
}

void PredictResponse_Class::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictResponse_Class_adlik_5fserving_2fapis_2fpredict_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(score_));
}

PredictResponse_Class::~PredictResponse_Class() {
  // @@protoc_insertion_point(destructor:adlik.serving.PredictResponse.Class)
  SharedDtor();
}

void PredictResponse_Class::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PredictResponse_Class::ArenaDtor(void* object) {
  PredictResponse_Class* _this = reinterpret_cast< PredictResponse_Class* >(object);
  (void)_this;
}
void PredictResponse_Class::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PredictResponse_Class::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictResponse_Class& PredictResponse_Class::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictResponse_Class_adlik_5fserving_2fapis_2fpredict_2eproto.base);
  return *internal_default_instance();
}


void PredictResponse_Class::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.PredictResponse.Class)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(score_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictResponse_Class::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_label(), ptr, ctx, "adlik.serving.PredictResponse.Class.label");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictResponse_Class::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.PredictResponse.Class)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 idx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float score = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string label = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->label().data(), static_cast<int>(this->label().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "adlik.serving.PredictResponse.Class.label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.PredictResponse.Class)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.PredictResponse.Class)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictResponse_Class::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.PredictResponse.Class)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // float score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  // string label = 3;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), static_cast<int>(this->label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.PredictResponse.Class.label");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->label(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.PredictResponse.Class)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictResponse_Class::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.PredictResponse.Class)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // float score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  // string label = 3;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), static_cast<int>(this->label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adlik.serving.PredictResponse.Class.label");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->label(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.PredictResponse.Class)
  return target;
}

size_t PredictResponse_Class::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.PredictResponse.Class)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 3;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->label());
  }

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->idx());
  }

  // float score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictResponse_Class::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.PredictResponse.Class)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictResponse_Class* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictResponse_Class>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.PredictResponse.Class)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.PredictResponse.Class)
    MergeFrom(*source);
  }
}

void PredictResponse_Class::MergeFrom(const PredictResponse_Class& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.PredictResponse.Class)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.label().size() > 0) {
    set_label(from.label());
  }
  if (from.idx() != 0) {
    set_idx(from.idx());
  }
  if (!(from.score() <= 0 && from.score() >= 0)) {
    set_score(from.score());
  }
}

void PredictResponse_Class::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.PredictResponse.Class)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictResponse_Class::CopyFrom(const PredictResponse_Class& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.PredictResponse.Class)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictResponse_Class::IsInitialized() const {
  return true;
}

void PredictResponse_Class::InternalSwap(PredictResponse_Class* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(idx_, other->idx_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictResponse_Class::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictResponse_Classes::InitAsDefaultInstance() {
}
class PredictResponse_Classes::_Internal {
 public:
};

PredictResponse_Classes::PredictResponse_Classes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.PredictResponse.Classes)
}
PredictResponse_Classes::PredictResponse_Classes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  cls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.PredictResponse.Classes)
}
PredictResponse_Classes::PredictResponse_Classes(const PredictResponse_Classes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cls_(from.cls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:adlik.serving.PredictResponse.Classes)
}

void PredictResponse_Classes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictResponse_Classes_adlik_5fserving_2fapis_2fpredict_2eproto.base);
}

PredictResponse_Classes::~PredictResponse_Classes() {
  // @@protoc_insertion_point(destructor:adlik.serving.PredictResponse.Classes)
  SharedDtor();
}

void PredictResponse_Classes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void PredictResponse_Classes::ArenaDtor(void* object) {
  PredictResponse_Classes* _this = reinterpret_cast< PredictResponse_Classes* >(object);
  (void)_this;
}
void PredictResponse_Classes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PredictResponse_Classes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictResponse_Classes& PredictResponse_Classes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictResponse_Classes_adlik_5fserving_2fapis_2fpredict_2eproto.base);
  return *internal_default_instance();
}


void PredictResponse_Classes::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.PredictResponse.Classes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cls_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictResponse_Classes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .adlik.serving.PredictResponse.Class cls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_cls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictResponse_Classes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.PredictResponse.Classes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .adlik.serving.PredictResponse.Class cls = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.PredictResponse.Classes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.PredictResponse.Classes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictResponse_Classes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.PredictResponse.Classes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .adlik.serving.PredictResponse.Class cls = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cls_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->cls(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.PredictResponse.Classes)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictResponse_Classes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.PredictResponse.Classes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .adlik.serving.PredictResponse.Class cls = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cls_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->cls(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.PredictResponse.Classes)
  return target;
}

size_t PredictResponse_Classes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.PredictResponse.Classes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .adlik.serving.PredictResponse.Class cls = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->cls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cls(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictResponse_Classes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.PredictResponse.Classes)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictResponse_Classes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictResponse_Classes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.PredictResponse.Classes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.PredictResponse.Classes)
    MergeFrom(*source);
  }
}

void PredictResponse_Classes::MergeFrom(const PredictResponse_Classes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.PredictResponse.Classes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cls_.MergeFrom(from.cls_);
}

void PredictResponse_Classes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.PredictResponse.Classes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictResponse_Classes::CopyFrom(const PredictResponse_Classes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.PredictResponse.Classes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictResponse_Classes::IsInitialized() const {
  return true;
}

void PredictResponse_Classes::InternalSwap(PredictResponse_Classes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&cls_)->InternalSwap(CastToBase(&other->cls_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictResponse_Classes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredictResponse_Output::InitAsDefaultInstance() {
  ::adlik::serving::_PredictResponse_Output_default_instance_._instance.get_mutable()->tensor_ = const_cast< ::tensorflow::TensorProto*>(
      ::tensorflow::TensorProto::internal_default_instance());
}
class PredictResponse_Output::_Internal {
 public:
  static const ::tensorflow::TensorProto& tensor(const PredictResponse_Output* msg);
};

const ::tensorflow::TensorProto&
PredictResponse_Output::_Internal::tensor(const PredictResponse_Output* msg) {
  return *msg->tensor_;
}
void PredictResponse_Output::unsafe_arena_set_allocated_tensor(
    ::tensorflow::TensorProto* tensor) {
  if (GetArenaNoVirtual() == nullptr) {
    delete tensor_;
  }
  tensor_ = tensor;
  if (tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adlik.serving.PredictResponse.Output.tensor)
}
void PredictResponse_Output::clear_tensor() {
  if (GetArenaNoVirtual() == nullptr && tensor_ != nullptr) {
    delete tensor_;
  }
  tensor_ = nullptr;
}
PredictResponse_Output::PredictResponse_Output()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.PredictResponse.Output)
}
PredictResponse_Output::PredictResponse_Output(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  batch_classes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.PredictResponse.Output)
}
PredictResponse_Output::PredictResponse_Output(const PredictResponse_Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      batch_classes_(from.batch_classes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tensor()) {
    tensor_ = new ::tensorflow::TensorProto(*from.tensor_);
  } else {
    tensor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:adlik.serving.PredictResponse.Output)
}

void PredictResponse_Output::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictResponse_Output_adlik_5fserving_2fapis_2fpredict_2eproto.base);
  tensor_ = nullptr;
}

PredictResponse_Output::~PredictResponse_Output() {
  // @@protoc_insertion_point(destructor:adlik.serving.PredictResponse.Output)
  SharedDtor();
}

void PredictResponse_Output::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete tensor_;
}

void PredictResponse_Output::ArenaDtor(void* object) {
  PredictResponse_Output* _this = reinterpret_cast< PredictResponse_Output* >(object);
  (void)_this;
}
void PredictResponse_Output::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PredictResponse_Output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictResponse_Output& PredictResponse_Output::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictResponse_Output_adlik_5fserving_2fapis_2fpredict_2eproto.base);
  return *internal_default_instance();
}


void PredictResponse_Output::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.PredictResponse.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  batch_classes_.Clear();
  if (GetArenaNoVirtual() == nullptr && tensor_ != nullptr) {
    delete tensor_;
  }
  tensor_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictResponse_Output::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorflow.TensorProto tensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .adlik.serving.PredictResponse.Classes batch_classes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_batch_classes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictResponse_Output::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.PredictResponse.Output)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.TensorProto tensor = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .adlik.serving.PredictResponse.Classes batch_classes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_batch_classes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.PredictResponse.Output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.PredictResponse.Output)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictResponse_Output::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.PredictResponse.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::tensor(this), output);
  }

  // repeated .adlik.serving.PredictResponse.Classes batch_classes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->batch_classes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->batch_classes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.PredictResponse.Output)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictResponse_Output::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.PredictResponse.Output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::tensor(this), target);
  }

  // repeated .adlik.serving.PredictResponse.Classes batch_classes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->batch_classes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->batch_classes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.PredictResponse.Output)
  return target;
}

size_t PredictResponse_Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.PredictResponse.Output)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .adlik.serving.PredictResponse.Classes batch_classes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->batch_classes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->batch_classes(static_cast<int>(i)));
    }
  }

  // .tensorflow.TensorProto tensor = 1;
  if (this->has_tensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tensor_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictResponse_Output::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.PredictResponse.Output)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictResponse_Output* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictResponse_Output>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.PredictResponse.Output)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.PredictResponse.Output)
    MergeFrom(*source);
  }
}

void PredictResponse_Output::MergeFrom(const PredictResponse_Output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.PredictResponse.Output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  batch_classes_.MergeFrom(from.batch_classes_);
  if (from.has_tensor()) {
    mutable_tensor()->::tensorflow::TensorProto::MergeFrom(from.tensor());
  }
}

void PredictResponse_Output::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.PredictResponse.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictResponse_Output::CopyFrom(const PredictResponse_Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.PredictResponse.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictResponse_Output::IsInitialized() const {
  return true;
}

void PredictResponse_Output::InternalSwap(PredictResponse_Output* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&batch_classes_)->InternalSwap(CastToBase(&other->batch_classes_));
  swap(tensor_, other->tensor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictResponse_Output::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PredictResponse_OutputsEntry_DoNotUse::PredictResponse_OutputsEntry_DoNotUse() {}
PredictResponse_OutputsEntry_DoNotUse::PredictResponse_OutputsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PredictResponse_OutputsEntry_DoNotUse::MergeFrom(const PredictResponse_OutputsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PredictResponse_OutputsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PredictResponse_OutputsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PredictResponse::InitAsDefaultInstance() {
  ::adlik::serving::_PredictResponse_default_instance_._instance.get_mutable()->model_spec_ = const_cast< ::adlik::serving::ModelSpec*>(
      ::adlik::serving::ModelSpec::internal_default_instance());
}
class PredictResponse::_Internal {
 public:
  static const ::adlik::serving::ModelSpec& model_spec(const PredictResponse* msg);
};

const ::adlik::serving::ModelSpec&
PredictResponse::_Internal::model_spec(const PredictResponse* msg) {
  return *msg->model_spec_;
}
void PredictResponse::unsafe_arena_set_allocated_model_spec(
    ::adlik::serving::ModelSpec* model_spec) {
  if (GetArenaNoVirtual() == nullptr) {
    delete model_spec_;
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adlik.serving.PredictResponse.model_spec)
}
void PredictResponse::clear_model_spec() {
  if (GetArenaNoVirtual() == nullptr && model_spec_ != nullptr) {
    delete model_spec_;
  }
  model_spec_ = nullptr;
}
PredictResponse::PredictResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.PredictResponse)
}
PredictResponse::PredictResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.PredictResponse)
}
PredictResponse::PredictResponse(const PredictResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  outputs_.MergeFrom(from.outputs_);
  if (from.has_model_spec()) {
    model_spec_ = new ::adlik::serving::ModelSpec(*from.model_spec_);
  } else {
    model_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:adlik.serving.PredictResponse)
}

void PredictResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredictResponse_adlik_5fserving_2fapis_2fpredict_2eproto.base);
  model_spec_ = nullptr;
}

PredictResponse::~PredictResponse() {
  // @@protoc_insertion_point(destructor:adlik.serving.PredictResponse)
  SharedDtor();
}

void PredictResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete model_spec_;
}

void PredictResponse::ArenaDtor(void* object) {
  PredictResponse* _this = reinterpret_cast< PredictResponse* >(object);
  (void)_this;
}
void PredictResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PredictResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictResponse& PredictResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredictResponse_adlik_5fserving_2fapis_2fpredict_2eproto.base);
  return *internal_default_instance();
}


void PredictResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.PredictResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  if (GetArenaNoVirtual() == nullptr && model_spec_ != nullptr) {
    delete model_spec_;
  }
  model_spec_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .adlik.serving.ModelSpec model_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_model_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .adlik.serving.PredictResponse.Output> outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&outputs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.PredictResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .adlik.serving.ModelSpec model_spec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_model_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .adlik.serving.PredictResponse.Output> outputs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          PredictResponse_OutputsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              PredictResponse_OutputsEntry_DoNotUse,
              std::string, ::adlik::serving::PredictResponse_Output,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictResponse_Output > > parser(&outputs_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "adlik.serving.PredictResponse.OutputsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.PredictResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.PredictResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.PredictResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adlik.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::model_spec(this), output);
  }

  // map<string, .adlik.serving.PredictResponse.Output> outputs = 2;
  if (!this->outputs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictResponse_Output >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "adlik.serving.PredictResponse.OutputsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->outputs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->outputs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictResponse_Output >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictResponse_Output >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        PredictResponse_OutputsEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictResponse_Output >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it) {
        PredictResponse_OutputsEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.PredictResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* PredictResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.PredictResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adlik.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::model_spec(this), target);
  }

  // map<string, .adlik.serving.PredictResponse.Output> outputs = 2;
  if (!this->outputs().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictResponse_Output >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "adlik.serving.PredictResponse.OutputsEntry.key");
      }
    };

    if (false &&
        this->outputs().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->outputs().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictResponse_Output >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictResponse_Output >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PredictResponse_OutputsEntry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictResponse_Output >::const_iterator
          it = this->outputs().begin();
          it != this->outputs().end(); ++it) {
        target = PredictResponse_OutputsEntry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.PredictResponse)
  return target;
}

size_t PredictResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.PredictResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .adlik.serving.PredictResponse.Output> outputs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->outputs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::adlik::serving::PredictResponse_Output >::const_iterator
      it = this->outputs().begin();
      it != this->outputs().end(); ++it) {
    total_size += PredictResponse_OutputsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .adlik.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_spec_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.PredictResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredictResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.PredictResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.PredictResponse)
    MergeFrom(*source);
  }
}

void PredictResponse::MergeFrom(const PredictResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.PredictResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  if (from.has_model_spec()) {
    mutable_model_spec()->::adlik::serving::ModelSpec::MergeFrom(from.model_spec());
  }
}

void PredictResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.PredictResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictResponse::CopyFrom(const PredictResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.PredictResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictResponse::IsInitialized() const {
  return true;
}

void PredictResponse::InternalSwap(PredictResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  outputs_.Swap(&other->outputs_);
  swap(model_spec_, other->model_spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace adlik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::adlik::serving::PredictRequest_InputsEntry_DoNotUse* Arena::CreateMaybeMessage< ::adlik::serving::PredictRequest_InputsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::PredictRequest_InputsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::PredictRequest_Class* Arena::CreateMaybeMessage< ::adlik::serving::PredictRequest_Class >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::PredictRequest_Class >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::PredictRequest_Output* Arena::CreateMaybeMessage< ::adlik::serving::PredictRequest_Output >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::PredictRequest_Output >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::PredictRequest_OutputFilterEntry_DoNotUse* Arena::CreateMaybeMessage< ::adlik::serving::PredictRequest_OutputFilterEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::PredictRequest_OutputFilterEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::PredictRequest* Arena::CreateMaybeMessage< ::adlik::serving::PredictRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::PredictRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::PredictResponse_Class* Arena::CreateMaybeMessage< ::adlik::serving::PredictResponse_Class >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::PredictResponse_Class >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::PredictResponse_Classes* Arena::CreateMaybeMessage< ::adlik::serving::PredictResponse_Classes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::PredictResponse_Classes >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::PredictResponse_Output* Arena::CreateMaybeMessage< ::adlik::serving::PredictResponse_Output >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::PredictResponse_Output >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::PredictResponse_OutputsEntry_DoNotUse* Arena::CreateMaybeMessage< ::adlik::serving::PredictResponse_OutputsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::PredictResponse_OutputsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::PredictResponse* Arena::CreateMaybeMessage< ::adlik::serving::PredictResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::PredictResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
