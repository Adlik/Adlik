// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adlik_serving/apis/get_model_meta.proto

#include "adlik_serving/apis/get_model_meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetModelMetaResponse_VersionStatusEntry_DoNotUse_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ModelConfigProto_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fframework_2fdomain_2fmodel_5fspec_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModelSpec_adlik_5fserving_2fframework_2fdomain_2fmodel_5fspec_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelVersionStatus_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto;
namespace adlik {
namespace serving {
class ModelVersionStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelVersionStatus> _instance;
} _ModelVersionStatus_default_instance_;
class GetModelMetaRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetModelMetaRequest> _instance;
} _GetModelMetaRequest_default_instance_;
class GetModelMetaResponse_VersionStatusEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetModelMetaResponse_VersionStatusEntry_DoNotUse> _instance;
} _GetModelMetaResponse_VersionStatusEntry_DoNotUse_default_instance_;
class GetModelMetaResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetModelMetaResponse> _instance;
} _GetModelMetaResponse_default_instance_;
}  // namespace serving
}  // namespace adlik
static void InitDefaultsscc_info_GetModelMetaRequest_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_GetModelMetaRequest_default_instance_;
    new (ptr) ::adlik::serving::GetModelMetaRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::GetModelMetaRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetModelMetaRequest_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetModelMetaRequest_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto}, {
      &scc_info_ModelSpec_adlik_5fserving_2fframework_2fdomain_2fmodel_5fspec_2eproto.base,}};

static void InitDefaultsscc_info_GetModelMetaResponse_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_GetModelMetaResponse_default_instance_;
    new (ptr) ::adlik::serving::GetModelMetaResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::GetModelMetaResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetModelMetaResponse_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_GetModelMetaResponse_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto}, {
      &scc_info_ModelSpec_adlik_5fserving_2fframework_2fdomain_2fmodel_5fspec_2eproto.base,
      &scc_info_ModelConfigProto_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto.base,
      &scc_info_GetModelMetaResponse_VersionStatusEntry_DoNotUse_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_GetModelMetaResponse_VersionStatusEntry_DoNotUse_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_GetModelMetaResponse_VersionStatusEntry_DoNotUse_default_instance_;
    new (ptr) ::adlik::serving::GetModelMetaResponse_VersionStatusEntry_DoNotUse();
  }
  ::adlik::serving::GetModelMetaResponse_VersionStatusEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetModelMetaResponse_VersionStatusEntry_DoNotUse_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetModelMetaResponse_VersionStatusEntry_DoNotUse_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto}, {
      &scc_info_ModelVersionStatus_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto.base,}};

static void InitDefaultsscc_info_ModelVersionStatus_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adlik::serving::_ModelVersionStatus_default_instance_;
    new (ptr) ::adlik::serving::ModelVersionStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adlik::serving::ModelVersionStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelVersionStatus_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ModelVersionStatus_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelVersionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::ModelVersionStatus, ready_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::GetModelMetaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::GetModelMetaRequest, model_spec_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::GetModelMetaResponse_VersionStatusEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::GetModelMetaResponse_VersionStatusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::GetModelMetaResponse_VersionStatusEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::GetModelMetaResponse_VersionStatusEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::GetModelMetaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adlik::serving::GetModelMetaResponse, model_spec_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::GetModelMetaResponse, config_),
  PROTOBUF_FIELD_OFFSET(::adlik::serving::GetModelMetaResponse, version_status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::adlik::serving::ModelVersionStatus)},
  { 6, -1, sizeof(::adlik::serving::GetModelMetaRequest)},
  { 12, 19, sizeof(::adlik::serving::GetModelMetaResponse_VersionStatusEntry_DoNotUse)},
  { 21, -1, sizeof(::adlik::serving::GetModelMetaResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_ModelVersionStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_GetModelMetaRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_GetModelMetaResponse_VersionStatusEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adlik::serving::_GetModelMetaResponse_default_instance_),
};

const char descriptor_table_protodef_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'adlik_serving/apis/get_model_meta.prot"
  "o\022\radlik.serving\032/adlik_serving/framewor"
  "k/domain/model_spec.proto\0321adlik_serving"
  "/framework/domain/model_config.proto\"I\n\022"
  "ModelVersionStatus\0223\n\013ready_state\030\001 \001(\0162"
  "\036.adlik.serving.ModelReadyState\"C\n\023GetMo"
  "delMetaRequest\022,\n\nmodel_spec\030\001 \001(\0132\030.adl"
  "ik.serving.ModelSpec\"\236\002\n\024GetModelMetaRes"
  "ponse\022,\n\nmodel_spec\030\001 \001(\0132\030.adlik.servin"
  "g.ModelSpec\022/\n\006config\030\002 \001(\0132\037.adlik.serv"
  "ing.ModelConfigProto\022N\n\016version_status\030\003"
  " \003(\01326.adlik.serving.GetModelMetaRespons"
  "e.VersionStatusEntry\032W\n\022VersionStatusEnt"
  "ry\022\013\n\003key\030\001 \001(\r\0220\n\005value\030\002 \001(\0132!.adlik.s"
  "erving.ModelVersionStatus:\0028\001*t\n\017ModelRe"
  "adyState\022\021\n\rMODEL_UNKNOWN\020\000\022\017\n\013MODEL_REA"
  "DY\020\001\022\025\n\021MODEL_UNAVAILABLE\020\002\022\021\n\rMODEL_LOA"
  "DING\020\003\022\023\n\017MODEL_UNLOADING\020\004B\003\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto_deps[2] = {
  &::descriptor_table_adlik_5fserving_2fframework_2fdomain_2fmodel_5fconfig_2eproto,
  &::descriptor_table_adlik_5fserving_2fframework_2fdomain_2fmodel_5fspec_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto_sccs[4] = {
  &scc_info_GetModelMetaRequest_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto.base,
  &scc_info_GetModelMetaResponse_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto.base,
  &scc_info_GetModelMetaResponse_VersionStatusEntry_DoNotUse_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto.base,
  &scc_info_ModelVersionStatus_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto_once;
static bool descriptor_table_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto = {
  &descriptor_table_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto_initialized, descriptor_table_protodef_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto, "adlik_serving/apis/get_model_meta.proto", 720,
  &descriptor_table_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto_once, descriptor_table_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto_sccs, descriptor_table_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto::offsets,
  file_level_metadata_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto, 4, file_level_enum_descriptors_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto, file_level_service_descriptors_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto), true);
namespace adlik {
namespace serving {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelReadyState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto);
  return file_level_enum_descriptors_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto[0];
}
bool ModelReadyState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ModelVersionStatus::InitAsDefaultInstance() {
}
class ModelVersionStatus::_Internal {
 public:
};

ModelVersionStatus::ModelVersionStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.ModelVersionStatus)
}
ModelVersionStatus::ModelVersionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.ModelVersionStatus)
}
ModelVersionStatus::ModelVersionStatus(const ModelVersionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ready_state_ = from.ready_state_;
  // @@protoc_insertion_point(copy_constructor:adlik.serving.ModelVersionStatus)
}

void ModelVersionStatus::SharedCtor() {
  ready_state_ = 0;
}

ModelVersionStatus::~ModelVersionStatus() {
  // @@protoc_insertion_point(destructor:adlik.serving.ModelVersionStatus)
  SharedDtor();
}

void ModelVersionStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void ModelVersionStatus::ArenaDtor(void* object) {
  ModelVersionStatus* _this = reinterpret_cast< ModelVersionStatus* >(object);
  (void)_this;
}
void ModelVersionStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelVersionStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelVersionStatus& ModelVersionStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelVersionStatus_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto.base);
  return *internal_default_instance();
}


void ModelVersionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.ModelVersionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ready_state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModelVersionStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .adlik.serving.ModelReadyState ready_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ready_state(static_cast<::adlik::serving::ModelReadyState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModelVersionStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.ModelVersionStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .adlik.serving.ModelReadyState ready_state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ready_state(static_cast< ::adlik::serving::ModelReadyState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.ModelVersionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.ModelVersionStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModelVersionStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.ModelVersionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adlik.serving.ModelReadyState ready_state = 1;
  if (this->ready_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->ready_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.ModelVersionStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelVersionStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.ModelVersionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adlik.serving.ModelReadyState ready_state = 1;
  if (this->ready_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->ready_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.ModelVersionStatus)
  return target;
}

size_t ModelVersionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.ModelVersionStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .adlik.serving.ModelReadyState ready_state = 1;
  if (this->ready_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ready_state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelVersionStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.ModelVersionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelVersionStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelVersionStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.ModelVersionStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.ModelVersionStatus)
    MergeFrom(*source);
  }
}

void ModelVersionStatus::MergeFrom(const ModelVersionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.ModelVersionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ready_state() != 0) {
    set_ready_state(from.ready_state());
  }
}

void ModelVersionStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.ModelVersionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelVersionStatus::CopyFrom(const ModelVersionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.ModelVersionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelVersionStatus::IsInitialized() const {
  return true;
}

void ModelVersionStatus::InternalSwap(ModelVersionStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ready_state_, other->ready_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelVersionStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetModelMetaRequest::InitAsDefaultInstance() {
  ::adlik::serving::_GetModelMetaRequest_default_instance_._instance.get_mutable()->model_spec_ = const_cast< ::adlik::serving::ModelSpec*>(
      ::adlik::serving::ModelSpec::internal_default_instance());
}
class GetModelMetaRequest::_Internal {
 public:
  static const ::adlik::serving::ModelSpec& model_spec(const GetModelMetaRequest* msg);
};

const ::adlik::serving::ModelSpec&
GetModelMetaRequest::_Internal::model_spec(const GetModelMetaRequest* msg) {
  return *msg->model_spec_;
}
void GetModelMetaRequest::unsafe_arena_set_allocated_model_spec(
    ::adlik::serving::ModelSpec* model_spec) {
  if (GetArenaNoVirtual() == nullptr) {
    delete model_spec_;
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adlik.serving.GetModelMetaRequest.model_spec)
}
void GetModelMetaRequest::clear_model_spec() {
  if (GetArenaNoVirtual() == nullptr && model_spec_ != nullptr) {
    delete model_spec_;
  }
  model_spec_ = nullptr;
}
GetModelMetaRequest::GetModelMetaRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.GetModelMetaRequest)
}
GetModelMetaRequest::GetModelMetaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.GetModelMetaRequest)
}
GetModelMetaRequest::GetModelMetaRequest(const GetModelMetaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_model_spec()) {
    model_spec_ = new ::adlik::serving::ModelSpec(*from.model_spec_);
  } else {
    model_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:adlik.serving.GetModelMetaRequest)
}

void GetModelMetaRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetModelMetaRequest_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto.base);
  model_spec_ = nullptr;
}

GetModelMetaRequest::~GetModelMetaRequest() {
  // @@protoc_insertion_point(destructor:adlik.serving.GetModelMetaRequest)
  SharedDtor();
}

void GetModelMetaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete model_spec_;
}

void GetModelMetaRequest::ArenaDtor(void* object) {
  GetModelMetaRequest* _this = reinterpret_cast< GetModelMetaRequest* >(object);
  (void)_this;
}
void GetModelMetaRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetModelMetaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetModelMetaRequest& GetModelMetaRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetModelMetaRequest_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto.base);
  return *internal_default_instance();
}


void GetModelMetaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.GetModelMetaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && model_spec_ != nullptr) {
    delete model_spec_;
  }
  model_spec_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetModelMetaRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .adlik.serving.ModelSpec model_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_model_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetModelMetaRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.GetModelMetaRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .adlik.serving.ModelSpec model_spec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_model_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.GetModelMetaRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.GetModelMetaRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetModelMetaRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.GetModelMetaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adlik.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::model_spec(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.GetModelMetaRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModelMetaRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.GetModelMetaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adlik.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::model_spec(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.GetModelMetaRequest)
  return target;
}

size_t GetModelMetaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.GetModelMetaRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .adlik.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_spec_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModelMetaRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.GetModelMetaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModelMetaRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetModelMetaRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.GetModelMetaRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.GetModelMetaRequest)
    MergeFrom(*source);
  }
}

void GetModelMetaRequest::MergeFrom(const GetModelMetaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.GetModelMetaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_model_spec()) {
    mutable_model_spec()->::adlik::serving::ModelSpec::MergeFrom(from.model_spec());
  }
}

void GetModelMetaRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.GetModelMetaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModelMetaRequest::CopyFrom(const GetModelMetaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.GetModelMetaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelMetaRequest::IsInitialized() const {
  return true;
}

void GetModelMetaRequest::InternalSwap(GetModelMetaRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(model_spec_, other->model_spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelMetaRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GetModelMetaResponse_VersionStatusEntry_DoNotUse::GetModelMetaResponse_VersionStatusEntry_DoNotUse() {}
GetModelMetaResponse_VersionStatusEntry_DoNotUse::GetModelMetaResponse_VersionStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetModelMetaResponse_VersionStatusEntry_DoNotUse::MergeFrom(const GetModelMetaResponse_VersionStatusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetModelMetaResponse_VersionStatusEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetModelMetaResponse_VersionStatusEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GetModelMetaResponse::InitAsDefaultInstance() {
  ::adlik::serving::_GetModelMetaResponse_default_instance_._instance.get_mutable()->model_spec_ = const_cast< ::adlik::serving::ModelSpec*>(
      ::adlik::serving::ModelSpec::internal_default_instance());
  ::adlik::serving::_GetModelMetaResponse_default_instance_._instance.get_mutable()->config_ = const_cast< ::adlik::serving::ModelConfigProto*>(
      ::adlik::serving::ModelConfigProto::internal_default_instance());
}
class GetModelMetaResponse::_Internal {
 public:
  static const ::adlik::serving::ModelSpec& model_spec(const GetModelMetaResponse* msg);
  static const ::adlik::serving::ModelConfigProto& config(const GetModelMetaResponse* msg);
};

const ::adlik::serving::ModelSpec&
GetModelMetaResponse::_Internal::model_spec(const GetModelMetaResponse* msg) {
  return *msg->model_spec_;
}
const ::adlik::serving::ModelConfigProto&
GetModelMetaResponse::_Internal::config(const GetModelMetaResponse* msg) {
  return *msg->config_;
}
void GetModelMetaResponse::unsafe_arena_set_allocated_model_spec(
    ::adlik::serving::ModelSpec* model_spec) {
  if (GetArenaNoVirtual() == nullptr) {
    delete model_spec_;
  }
  model_spec_ = model_spec;
  if (model_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adlik.serving.GetModelMetaResponse.model_spec)
}
void GetModelMetaResponse::clear_model_spec() {
  if (GetArenaNoVirtual() == nullptr && model_spec_ != nullptr) {
    delete model_spec_;
  }
  model_spec_ = nullptr;
}
void GetModelMetaResponse::unsafe_arena_set_allocated_config(
    ::adlik::serving::ModelConfigProto* config) {
  if (GetArenaNoVirtual() == nullptr) {
    delete config_;
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adlik.serving.GetModelMetaResponse.config)
}
void GetModelMetaResponse::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
GetModelMetaResponse::GetModelMetaResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:adlik.serving.GetModelMetaResponse)
}
GetModelMetaResponse::GetModelMetaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  version_status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adlik.serving.GetModelMetaResponse)
}
GetModelMetaResponse::GetModelMetaResponse(const GetModelMetaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_status_.MergeFrom(from.version_status_);
  if (from.has_model_spec()) {
    model_spec_ = new ::adlik::serving::ModelSpec(*from.model_spec_);
  } else {
    model_spec_ = nullptr;
  }
  if (from.has_config()) {
    config_ = new ::adlik::serving::ModelConfigProto(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:adlik.serving.GetModelMetaResponse)
}

void GetModelMetaResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetModelMetaResponse_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto.base);
  ::memset(&model_spec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&model_spec_)) + sizeof(config_));
}

GetModelMetaResponse::~GetModelMetaResponse() {
  // @@protoc_insertion_point(destructor:adlik.serving.GetModelMetaResponse)
  SharedDtor();
}

void GetModelMetaResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete model_spec_;
  if (this != internal_default_instance()) delete config_;
}

void GetModelMetaResponse::ArenaDtor(void* object) {
  GetModelMetaResponse* _this = reinterpret_cast< GetModelMetaResponse* >(object);
  (void)_this;
}
void GetModelMetaResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetModelMetaResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetModelMetaResponse& GetModelMetaResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetModelMetaResponse_adlik_5fserving_2fapis_2fget_5fmodel_5fmeta_2eproto.base);
  return *internal_default_instance();
}


void GetModelMetaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:adlik.serving.GetModelMetaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_status_.Clear();
  if (GetArenaNoVirtual() == nullptr && model_spec_ != nullptr) {
    delete model_spec_;
  }
  model_spec_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetModelMetaResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .adlik.serving.ModelSpec model_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_model_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .adlik.serving.ModelConfigProto config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .adlik.serving.ModelVersionStatus> version_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&version_status_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetModelMetaResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:adlik.serving.GetModelMetaResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .adlik.serving.ModelSpec model_spec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_model_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .adlik.serving.ModelConfigProto config = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .adlik.serving.ModelVersionStatus> version_status = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          GetModelMetaResponse_VersionStatusEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              GetModelMetaResponse_VersionStatusEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::uint32, ::adlik::serving::ModelVersionStatus,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::adlik::serving::ModelVersionStatus > > parser(&version_status_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:adlik.serving.GetModelMetaResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:adlik.serving.GetModelMetaResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetModelMetaResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:adlik.serving.GetModelMetaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adlik.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::model_spec(this), output);
  }

  // .adlik.serving.ModelConfigProto config = 2;
  if (this->has_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::config(this), output);
  }

  // map<uint32, .adlik.serving.ModelVersionStatus> version_status = 3;
  if (!this->version_status().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::adlik::serving::ModelVersionStatus >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->version_status().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->version_status().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::adlik::serving::ModelVersionStatus >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::adlik::serving::ModelVersionStatus >::const_iterator
          it = this->version_status().begin();
          it != this->version_status().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        GetModelMetaResponse_VersionStatusEntry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::adlik::serving::ModelVersionStatus >::const_iterator
          it = this->version_status().begin();
          it != this->version_status().end(); ++it) {
        GetModelMetaResponse_VersionStatusEntry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:adlik.serving.GetModelMetaResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModelMetaResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:adlik.serving.GetModelMetaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adlik.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::model_spec(this), target);
  }

  // .adlik.serving.ModelConfigProto config = 2;
  if (this->has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::config(this), target);
  }

  // map<uint32, .adlik.serving.ModelVersionStatus> version_status = 3;
  if (!this->version_status().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::adlik::serving::ModelVersionStatus >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->version_status().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->version_status().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::adlik::serving::ModelVersionStatus >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::adlik::serving::ModelVersionStatus >::const_iterator
          it = this->version_status().begin();
          it != this->version_status().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetModelMetaResponse_VersionStatusEntry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::adlik::serving::ModelVersionStatus >::const_iterator
          it = this->version_status().begin();
          it != this->version_status().end(); ++it) {
        target = GetModelMetaResponse_VersionStatusEntry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adlik.serving.GetModelMetaResponse)
  return target;
}

size_t GetModelMetaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adlik.serving.GetModelMetaResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .adlik.serving.ModelVersionStatus> version_status = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->version_status_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::adlik::serving::ModelVersionStatus >::const_iterator
      it = this->version_status().begin();
      it != this->version_status().end(); ++it) {
    total_size += GetModelMetaResponse_VersionStatusEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .adlik.serving.ModelSpec model_spec = 1;
  if (this->has_model_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_spec_);
  }

  // .adlik.serving.ModelConfigProto config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModelMetaResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adlik.serving.GetModelMetaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModelMetaResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetModelMetaResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adlik.serving.GetModelMetaResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adlik.serving.GetModelMetaResponse)
    MergeFrom(*source);
  }
}

void GetModelMetaResponse::MergeFrom(const GetModelMetaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adlik.serving.GetModelMetaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  version_status_.MergeFrom(from.version_status_);
  if (from.has_model_spec()) {
    mutable_model_spec()->::adlik::serving::ModelSpec::MergeFrom(from.model_spec());
  }
  if (from.has_config()) {
    mutable_config()->::adlik::serving::ModelConfigProto::MergeFrom(from.config());
  }
}

void GetModelMetaResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adlik.serving.GetModelMetaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModelMetaResponse::CopyFrom(const GetModelMetaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adlik.serving.GetModelMetaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelMetaResponse::IsInitialized() const {
  return true;
}

void GetModelMetaResponse::InternalSwap(GetModelMetaResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  version_status_.Swap(&other->version_status_);
  swap(model_spec_, other->model_spec_);
  swap(config_, other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelMetaResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace serving
}  // namespace adlik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::adlik::serving::ModelVersionStatus* Arena::CreateMaybeMessage< ::adlik::serving::ModelVersionStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::ModelVersionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::GetModelMetaRequest* Arena::CreateMaybeMessage< ::adlik::serving::GetModelMetaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::GetModelMetaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::GetModelMetaResponse_VersionStatusEntry_DoNotUse* Arena::CreateMaybeMessage< ::adlik::serving::GetModelMetaResponse_VersionStatusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::GetModelMetaResponse_VersionStatusEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::adlik::serving::GetModelMetaResponse* Arena::CreateMaybeMessage< ::adlik::serving::GetModelMetaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adlik::serving::GetModelMetaResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
