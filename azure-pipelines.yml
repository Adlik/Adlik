trigger:
  - staging
  - trying
  - master
variables:
    BAZEL_BUILD_CACHE: $(Pipeline.Workspace)/__bazel_build_cache
jobs:
  - job: BazelBuildClients
    displayName: Bazel build clients
    pool:
        vmImage: ubuntu-latest
    steps:
      - template: ci/azure-pipelines/install-bazel.yml
      - task: UsePythonVersion@0
        displayName: Use latest Python
      - script: pip install -U wheel
        displayName: Install additional dependencies
      - template: ci/azure-pipelines/use-build-cache.yml
        parameters:
            key: bazel-build-clients
            path: $(BAZEL_BUILD_CACHE)
      - script: |
            ci/checks/bazel-build-clients.py \
                -c opt \
                --disk_cache="$BAZEL_BUILD_CACHE" \
                --incompatible_no_support_tools_in_action_inputs=false
        displayName: Bazel build clients
      - task: PublishBuildArtifacts@1
        displayName: Publish build artifacts
        inputs:
            pathtoPublish: __adlik_clients
            artifactName: adlik-clients
  - job: BazelBuildServingOpenVINO
    displayName: Bazel build serving (OpenVINO)
    pool:
        vmImage: ubuntu-latest
    timeoutInMinutes: 0
    steps:
      - template: ci/azure-pipelines/install-bazel.yml
      - template: ci/azure-pipelines/install-openvino.yml
      - task: UsePythonVersion@0
        displayName: Use latest Python
      - template: ci/azure-pipelines/use-build-cache.yml
        parameters:
            key: bazel-build-serving-openvino
            path: $(BAZEL_BUILD_CACHE)
      - script: |
            export INTEL_CVSDK_DIR=/opt/intel/openvino_2019.3.344
            export InferenceEngine_DIR=$INTEL_CVSDK_DIR/deployment_tools/inference_engine/share
            ci/checks/bazel-build-serving.py \
                --config=openvino \
                -c opt \
                --disk_cache="$BAZEL_BUILD_CACHE" \
                --incompatible_no_support_tools_in_action_inputs=false \
                --incompatible_disable_nocopts=false
        displayName: Bazel build serving
      - task: PublishBuildArtifacts@1
        displayName: Publish build artifacts
        inputs:
            pathtoPublish: __adlik_serving/adlik_serving
            artifactName: adlik-serving-openvino
  - job: BazelBuildServingTensorFlowCPU
    displayName: Bazel build serving (TensorFlow CPU)
    strategy:
        matrix:
            Linux:
              vmImage: ubuntu-latest
            macOS:
              vmImage: macos-latest
    pool:
        vmImage: $(vmImage)
    timeoutInMinutes: 0
    steps:
      - template: ci/azure-pipelines/install-bazel.yml
      - task: UsePythonVersion@0
        displayName: Use latest Python
      - template: ci/azure-pipelines/use-build-cache.yml
        parameters:
            key: bazel-build-serving-tensorflow-cpu
            path: $(BAZEL_BUILD_CACHE)
      - script: |
            ci/checks/bazel-build-serving.py \
                --config=tensorflow-cpu \
                -c opt \
                --disk_cache="$BAZEL_BUILD_CACHE" \
                --incompatible_no_support_tools_in_action_inputs=false \
                --incompatible_disable_nocopts=false
        displayName: Bazel build serving
      - task: PublishBuildArtifacts@1
        displayName: Publish build artifacts
        inputs:
            pathtoPublish: __adlik_serving/adlik_serving
            artifactName: adlik-serving-tensorflow-cpu ($(Agent.OS))
  - job: BazelBuildServingTensorFlowGPU
    displayName: Bazel build serving (TensorFlow GPU)
    pool:
        vmImage: ubuntu-latest
    timeoutInMinutes: 0
    steps:
      - template: ci/azure-pipelines/install-bazel.yml
      - template: ci/azure-pipelines/install-cuda.yml
      - task: UsePythonVersion@0
        displayName: Use latest Python
      - template: ci/azure-pipelines/use-build-cache.yml
        parameters:
            key: bazel-build-serving-tensorflow-gpu
            path: $(BAZEL_BUILD_CACHE)
      - script: |
            env TF_CUDA_VERSION=10.0 \
                ci/checks/bazel-build-serving.py \
                    --config=tensorflow-gpu \
                    -c opt \
                    --disk_cache="$BAZEL_BUILD_CACHE" \
                    --incompatible_no_support_tools_in_action_inputs=false \
                    --incompatible_disable_nocopts=false \
                    --incompatible_use_specific_tool_files=false
        displayName: Bazel build serving
      - task: PublishBuildArtifacts@1
        displayName: Publish build artifacts
        inputs:
            pathtoPublish: __adlik_serving/adlik_serving
            artifactName: adlik-serving-tensorflow-gpu
  - job: BazelBuildServingTensorFlowLiteCPU
    displayName: Bazel build serving (TensorFlow Lite CPU)
    strategy:
        matrix:
            Linux:
              vmImage: ubuntu-latest
            macOS:
              vmImage: macos-latest
    pool:
        vmImage: $(vmImage)
    timeoutInMinutes: 0
    steps:
      - template: ci/azure-pipelines/install-bazel.yml
      - task: UsePythonVersion@0
        displayName: Use latest Python
      - template: ci/azure-pipelines/use-build-cache.yml
        parameters:
            key: bazel-build-serving-tensorflow-lite-cpu
            path: $(BAZEL_BUILD_CACHE)
      - script: |
            ci/checks/bazel-build-serving.py \
                --config=tensorflow-lite-cpu \
                -c opt \
                --disk_cache="$BAZEL_BUILD_CACHE" \
                --incompatible_no_support_tools_in_action_inputs=false \
                --incompatible_disable_nocopts=false
        displayName: Bazel build serving
      - task: PublishBuildArtifacts@1
        displayName: Publish build artifacts
        inputs:
            pathtoPublish: __adlik_serving/adlik_serving
            artifactName: adlik-serving-tensorflow-lite-cpu ($(Agent.OS))
  - job: BazelBuildServingTensorRT
    displayName: Bazel build serving (TensorRT)
    pool:
        vmImage: ubuntu-latest
    timeoutInMinutes: 0
    steps:
      - template: ci/azure-pipelines/install-bazel.yml
      - template: ci/azure-pipelines/install-tensorrt.yml
      - task: UsePythonVersion@0
        displayName: Use latest Python
      - template: ci/azure-pipelines/use-build-cache.yml
        parameters:
            key: bazel-build-serving-tensorrt
            path: $(BAZEL_BUILD_CACHE)
      - script: |
            env TF_CUDA_VERSION=10.0 \
                ci/checks/bazel-build-serving.py \
                    --config=tensorrt \
                    -c opt \
                    --disk_cache="$BAZEL_BUILD_CACHE" \
                    --action_env=LIBRARY_PATH=/usr/local/cuda-10.0/lib64/stubs \
                    --incompatible_no_support_tools_in_action_inputs=false \
                    --incompatible_disable_nocopts=false \
                    --incompatible_use_specific_tool_files=false
        displayName: Bazel build serving
      - task: PublishBuildArtifacts@1
        displayName: Publish build artifacts
        inputs:
            pathtoPublish: __adlik_serving/adlik_serving
            artifactName: adlik-serving-tensorrt
  - job: Buildifier
    displayName: Buildifier
    pool:
        vmImage: ubuntu-latest
    steps:
      - template: ci/azure-pipelines/install-buildifier.yml
      - script: ci/checks/buildifier.py
        displayName: Run Buildifier
  - job: ClangFormat
    displayName: Clang-Format
    pool:
        vmImage: ubuntu-latest
    steps:
      - template: ci/azure-pipelines/install-clang-format.yml
      - task: UsePythonVersion@0
        displayName: Use latest Python
      - script: ci/checks/clang-format.py
        displayName: Run Clang-Format
  - job: CommitMessage
    displayName: Commit message
    pool:
        vmImage: ubuntu-latest
    steps:
      - task: UsePythonVersion@0
        displayName: Use latest Python
      - script: ci/checks/commit-message.py
        displayName: Check commit message
  - job: Copyright
    displayName: Copyright
    pool:
        vmImage: ubuntu-latest
    steps:
      - task: UsePythonVersion@0
        displayName: Use latest Python
      - script: ci/checks/copyright.py
        displayName: Check copyright notations
  - job: Flake8
    displayName: Flake8
    pool:
        vmImage: ubuntu-latest
    steps:
      - task: UsePythonVersion@0
        displayName: Use latest Python
      - script: python3 -m pip install -U flake8
        displayName: Install Flake8
      - script: ci/checks/flake8.py
        displayName: Run Flake8
  - job: ToxModelCompiler
    displayName: Tox model compiler
    pool:
        vmImage: ubuntu-latest
    steps:
      - task: UsePythonVersion@0
        displayName: Use Python 3.6
        inputs:
            versionSpec: '3.6'
      - script: pip install -U tox
        displayName: Install tox
      - script: cd model_compiler && tox
        displayName: Run tox
